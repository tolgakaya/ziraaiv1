using Business.Services.Dashboard;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System.Security.Claims;
using System.Threading.Tasks;

namespace WebAPI.Controllers
{
    [Route("api/v{version:apiVersion}/[controller]")]
    [ApiController]
    [ApiVersion("1.0")]
    [Authorize(Roles = "Sponsor,Admin")]
    public class EnhancedDashboardController : BaseApiController
    {
        private readonly IDashboardEnhancementService _dashboardService;

        public EnhancedDashboardController(IDashboardEnhancementService dashboardService)
        {
            _dashboardService = dashboardService;
        }

        /// <summary>
        /// Get personalized dashboard with AI-driven insights and customizable layout
        /// Features real-time metrics, trend analysis, and intelligent recommendations
        /// </summary>
        [HttpGet("personalized")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status403Forbidden)]
        public async Task<IActionResult> GetPersonalizedDashboard()
        {
            try
            {
                var sponsorId = GetCurrentUserId();
                if (!sponsorId.HasValue)
                {
                    return Forbid("Sponsor ID bulunamadı");
                }

                var result = await _dashboardService.GetPersonalizedDashboardAsync(sponsorId.Value);
                return result.Success ? Ok(result) : BadRequest(result);
            }
            catch (System.Exception ex)
            {
                return BadRequest(new { success = false, message = $"Kişiselleştirilmiş dashboard alınamadı: {ex.Message}" });
            }
        }

        /// <summary>
        /// Get available dashboard widgets with drag-and-drop customization
        /// Supports responsive layouts and real-time data binding
        /// </summary>
        [HttpGet("widgets")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        public async Task<IActionResult> GetDashboardWidgets([FromQuery] string layout = "default")
        {
            try
            {
                var sponsorId = GetCurrentUserId();
                if (!sponsorId.HasValue)
                {
                    return Forbid("Sponsor ID bulunamadı");
                }

                var result = await _dashboardService.GetDashboardWidgetsAsync(sponsorId.Value, layout);
                return result.Success ? Ok(result) : BadRequest(result);
            }
            catch (System.Exception ex)
            {
                return BadRequest(new { success = false, message = $"Dashboard widget'ları alınamadı: {ex.Message}" });
            }
        }

        /// <summary>
        /// Get interactive dashboard data with drill-down capabilities
        /// Includes dynamic charts, filterable tables, and contextual actions
        /// </summary>
        [HttpGet("interactive-data")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        public async Task<IActionResult> GetInteractiveDashboardData()
        {
            try
            {
                var sponsorId = GetCurrentUserId();
                if (!sponsorId.HasValue)
                {
                    return Forbid("Sponsor ID bulunamadı");
                }

                var result = await _dashboardService.GetInteractiveDashboardDataAsync(sponsorId.Value);
                return result.Success ? Ok(result) : BadRequest(result);
            }
            catch (System.Exception ex)
            {
                return BadRequest(new { success = false, message = $"İnteraktif dashboard verileri alınamadı: {ex.Message}" });
            }
        }

        /// <summary>
        /// Get real-time dashboard notifications with smart categorization
        /// Features priority-based sorting and actionable notification items
        /// </summary>
        [HttpGet("notifications")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        public async Task<IActionResult> GetDashboardNotifications()
        {
            try
            {
                var sponsorId = GetCurrentUserId();
                if (!sponsorId.HasValue)
                {
                    return Forbid("Sponsor ID bulunamadı");
                }

                var result = await _dashboardService.GetDashboardNotificationsAsync(sponsorId.Value);
                return result.Success ? Ok(result) : BadRequest(result);
            }
            catch (System.Exception ex)
            {
                return BadRequest(new { success = false, message = $"Dashboard bildirimleri alınamadı: {ex.Message}" });
            }
        }

        /// <summary>
        /// Get advanced performance insights with benchmarking
        /// Includes trend analysis, competitive positioning, and optimization recommendations
        /// </summary>
        [HttpGet("performance-insights")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        public async Task<IActionResult> GetPerformanceInsights()
        {
            try
            {
                var sponsorId = GetCurrentUserId();
                if (!sponsorId.HasValue)
                {
                    return Forbid("Sponsor ID bulunamadı");
                }

                var result = await _dashboardService.GetPerformanceInsightsAsync(sponsorId.Value);
                return result.Success ? Ok(result) : BadRequest(result);
            }
            catch (System.Exception ex)
            {
                return BadRequest(new { success = false, message = $"Performans öngörüleri alınamadı: {ex.Message}" });
            }
        }

        /// <summary>
        /// Save user dashboard preferences and layout customizations
        /// Supports theme selection, widget positioning, and notification settings
        /// </summary>
        [HttpPost("preferences")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        public async Task<IActionResult> SaveDashboardPreferences([FromBody] DashboardPreferences preferences)
        {
            try
            {
                var sponsorId = GetCurrentUserId();
                if (!sponsorId.HasValue)
                {
                    return Forbid("Sponsor ID bulunamadı");
                }

                var result = await _dashboardService.SaveDashboardPreferencesAsync(sponsorId.Value, preferences);
                return result.Success ? Ok(result) : BadRequest(result);
            }
            catch (System.Exception ex)
            {
                return BadRequest(new { success = false, message = $"Dashboard tercihleri kaydedilemedi: {ex.Message}" });
            }
        }

        /// <summary>
        /// Get real-time dashboard updates via Server-Sent Events (SSE)
        /// Provides live metric updates, notifications, and status changes
        /// </summary>
        [HttpGet("real-time-updates")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        public async Task<IActionResult> GetRealTimeUpdates()
        {
            try
            {
                var sponsorId = GetCurrentUserId();
                if (!sponsorId.HasValue)
                {
                    return Forbid("Sponsor ID bulunamadı");
                }

                var result = await _dashboardService.GetRealTimeUpdatesAsync(sponsorId.Value);
                return result.Success ? Ok(result) : BadRequest(result);
            }
            catch (System.Exception ex)
            {
                return BadRequest(new { success = false, message = $"Gerçek zamanlı güncellemeler alınamadı: {ex.Message}" });
            }
        }

        /// <summary>
        /// Export dashboard data in multiple formats (PDF, Excel, CSV)
        /// Includes customizable report templates and scheduled export options
        /// </summary>
        [HttpPost("export")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        public async Task<IActionResult> ExportDashboardData([FromQuery] string format = "pdf")
        {
            try
            {
                var sponsorId = GetCurrentUserId();
                if (!sponsorId.HasValue)
                {
                    return Forbid("Sponsor ID bulunamadı");
                }

                // Validate format
                var supportedFormats = new[] { "pdf", "excel", "csv", "json" };
                if (!supportedFormats.Contains(format.ToLower()))
                {
                    return BadRequest(new { success = false, message = $"Desteklenmeyen format: {format}. Desteklenen formatlar: {string.Join(", ", supportedFormats)}" });
                }

                var result = await _dashboardService.ExportDashboardDataAsync(sponsorId.Value, format);
                return result.Success ? Ok(result) : BadRequest(result);
            }
            catch (System.Exception ex)
            {
                return BadRequest(new { success = false, message = $"Dashboard verileri dışa aktarılamadı: {ex.Message}" });
            }
        }

        /// <summary>
        /// Get dashboard layout templates for quick setup
        /// Features industry-specific templates and customizable starter layouts
        /// </summary>
        [HttpGet("layout-templates")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        public async Task<IActionResult> GetLayoutTemplates()
        {
            try
            {
                var templates = new
                {
                    default_layouts = new[]
                    {
                        new
                        {
                            id = "executive_summary",
                            name = "Yönetici Özeti",
                            description = "Üst düzey KPI'lar ve trend analizleri",
                            preview_image = "/assets/templates/executive-summary.png",
                            widgets = new[] { "performance_overview", "key_metrics", "trend_charts", "alerts" },
                            target_audience = "C-level executives, business owners",
                            complexity = "simple"
                        },
                        new
                        {
                            id = "detailed_analytics",
                            name = "Detaylı Analitik",
                            description = "Kapsamlı performans verileri ve drill-down analizleri",
                            preview_image = "/assets/templates/detailed-analytics.png",
                            widgets = new[] { "all_charts", "interactive_tables", "geographic_data", "comparative_analysis" },
                            target_audience = "Analysts, marketing managers",
                            complexity = "advanced"
                        },
                        new
                        {
                            id = "operational_dashboard",
                            name = "Operasyonel Dashboard",
                            description = "Günlük operasyonlar için gerçek zamanlı veriler",
                            preview_image = "/assets/templates/operational.png",
                            widgets = new[] { "real_time_metrics", "activity_feed", "quick_actions", "status_indicators" },
                            target_audience = "Operations teams, campaign managers",
                            complexity = "intermediate"
                        },
                        new
                        {
                            id = "mobile_optimized",
                            name = "Mobil Optimize",
                            description = "Mobil cihazlar için optimize edilmiş kompakt görünüm",
                            preview_image = "/assets/templates/mobile.png",
                            widgets = new[] { "summary_cards", "mini_charts", "quick_stats" },
                            target_audience = "Mobile users, field workers",
                            complexity = "simple"
                        }
                    },
                    customization_options = new
                    {
                        themes = new[] { "light", "dark", "auto", "high_contrast" },
                        color_schemes = new[] { "blue", "green", "orange", "purple", "custom" },
                        widget_sizes = new[] { "small", "medium", "large", "extra_large" },
                        refresh_intervals = new[] { "30s", "1m", "5m", "15m", "manual" }
                    },
                    responsive_breakpoints = new
                    {
                        mobile = "< 768px",
                        tablet = "768px - 1024px",
                        desktop = "1024px - 1440px",
                        large_desktop = "> 1440px"
                    }
                };

                return Ok(new { success = true, data = templates });
            }
            catch (System.Exception ex)
            {
                return BadRequest(new { success = false, message = $"Layout şablonları alınamadı: {ex.Message}" });
            }
        }

        /// <summary>
        /// Get dashboard help and onboarding information
        /// Includes interactive tutorials and feature explanations
        /// </summary>
        [HttpGet("help")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        public async Task<IActionResult> GetDashboardHelp()
        {
            try
            {
                var helpContent = new
                {
                    quick_start = new
                    {
                        title = "Dashboard'a Hoş Geldiniz!",
                        description = "Sponsorluk performansınızı takip etmek için gereken her şey burada.",
                        steps = new[]
                        {
                            new { step = 1, title = "Kartları İnceleyin", description = "Ana performans kartlarınızda önemli metrikleri görün" },
                            new { step = 2, title = "Grafikleri Keşfedin", description = "İnteraktif grafiklerle trendleri analiz edin" },
                            new { step = 3, title = "Hızlı Aksiyonlar", description = "Sık kullanılan işlemleri hızlı aksiyon menüsünden gerçekleştirin" },
                            new { step = 4, title = "Kişiselleştirin", description = "Dashboard'unuzu tercihlerinize göre özelleştirin" }
                        }
                    },
                    feature_highlights = new[]
                    {
                        new
                        {
                            feature = "real_time_updates",
                            title = "Gerçek Zamanlı Güncellemeler",
                            description = "Verileriniz otomatik olarak güncellenir, manuel yenileme gerekmez",
                            icon = "fas fa-sync"
                        },
                        new
                        {
                            feature = "smart_insights",
                            title = "Akıllı Öngörüler",
                            description = "AI destekli analizlerle optimizasyon fırsatlarını keşfedin",
                            icon = "fas fa-brain"
                        },
                        new
                        {
                            feature = "mobile_responsive",
                            title = "Mobil Uyumlu",
                            description = "Tüm cihazlarda mükemmel görüntüleme deneyimi",
                            icon = "fas fa-mobile-alt"
                        },
                        new
                        {
                            feature = "export_capabilities",
                            title = "Dışa Aktarma",
                            description = "Raporlarınızı PDF, Excel veya CSV formatında paylaşın",
                            icon = "fas fa-download"
                        }
                    ],
                    keyboard_shortcuts = new[]
                    {
                        new { shortcut = "Ctrl + D", action = "Dashboard'u yenile" },
                        new { shortcut = "Ctrl + E", action = "Verileri dışa aktar" },
                        new { shortcut = "Ctrl + N", action = "Yeni bildirimler" },
                        new { shortcut = "Ctrl + S", action = "Tercihleri kaydet" }
                    },
                    support_resources = new
                    {
                        documentation_url = "/docs/dashboard",
                        video_tutorials_url = "/tutorials/dashboard",
                        support_email = "support@ziraai.com",
                        community_forum = "/community/dashboard-help"
                    }
                };

                return Ok(new { success = true, data = helpContent });
            }
            catch (System.Exception ex)
            {
                return BadRequest(new { success = false, message = $"Yardım içeriği alınamadı: {ex.Message}" });
            }
        }

        /// <summary>
        /// Get dashboard performance metrics and optimization suggestions
        /// Helps users understand load times and suggests improvements
        /// </summary>
        [HttpGet("performance-metrics")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status403Forbidden)]
        public async Task<IActionResult> GetDashboardPerformanceMetrics()
        {
            try
            {
                var performanceMetrics = new
                {
                    page_load_time = new
                    {
                        current = "1.2s",
                        target = "< 2s",
                        status = "good",
                        improvement_tips = new[]
                        {
                            "Daha az widget kullanarak yükleme süresini azaltabilirsiniz",
                            "Gerçek zamanlı güncellemelerin sıklığını azaltmayı düşünün"
                        }
                    },
                    data_freshness = new
                    {
                        last_update = DateTime.Now.AddMinutes(-2),
                        refresh_interval = "5 dakika",
                        status = "fresh",
                        next_update = DateTime.Now.AddMinutes(3)
                    },
                    widget_performance = new[]
                    {
                        new { widget = "performance_chart", load_time = "0.8s", status = "excellent" },
                        new { widget = "recent_activity", load_time = "0.3s", status = "excellent" },
                        new { widget = "geographic_map", load_time = "1.5s", status = "good" },
                        new { widget = "detailed_table", load_time = "2.1s", status = "needs_improvement" }
                    },
                    optimization_suggestions = new[]
                    {
                        new
                        {
                            priority = "high",
                            suggestion = "Detaylı tablo widget'ını optimize edin",
                            expected_improvement = "0.8s daha hızlı yükleme",
                            action = "Pagination kullanarak satır sayısını azaltın"
                        },
                        new
                        {
                            priority = "medium",
                            suggestion = "Coğrafi harita verilerini cache'leyin",
                            expected_improvement = "0.3s daha hızlı yükleme",
                            action = "Harita verilerini yerel olarak saklayın"
                        }
                    ],
                    browser_compatibility = new
                    {
                        current_browser = "Chrome 118.0",
                        compatibility_score = "100%",
                        supported_features = new[] { "WebGL", "SSE", "Local Storage", "Service Workers" },
                        recommendations = new[] { "Tüm özellikler destekleniyor" }
                    }
                };

                return Ok(new { success = true, data = performanceMetrics });
            }
            catch (System.Exception ex)
            {
                return BadRequest(new { success = false, message = $"Performans metrikleri alınamadı: {ex.Message}" });
            }
        }

        #region Private Helper Methods

        private int? GetCurrentUserId()
        {
            var userIdClaim = User.FindFirst(ClaimTypes.NameIdentifier);
            if (int.TryParse(userIdClaim?.Value, out int userId))
            {
                return userId;
            }
            return null;
        }

        #endregion
    }
}