CREATE TABLE IF NOT EXISTS "__EFMigrationsHistory" (
    "MigrationId" character varying(150) NOT NULL,
    "ProductVersion" character varying(32) NOT NULL,
    CONSTRAINT "PK___EFMigrationsHistory" PRIMARY KEY ("MigrationId")
);

START TRANSACTION;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250810173939_InitialCreate') THEN
    CREATE TABLE "GroupClaims" (
        "GroupId" integer NOT NULL,
        "ClaimId" integer NOT NULL,
        CONSTRAINT "PK_GroupClaims" PRIMARY KEY ("GroupId", "ClaimId")
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250810173939_InitialCreate') THEN
    CREATE TABLE "Groups" (
        "Id" integer GENERATED BY DEFAULT AS IDENTITY,
        "GroupName" character varying(50) NOT NULL,
        CONSTRAINT "PK_Groups" PRIMARY KEY ("Id")
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250810173939_InitialCreate') THEN
    CREATE TABLE "Languages" (
        "Id" integer GENERATED BY DEFAULT AS IDENTITY,
        "Name" character varying(10) NOT NULL,
        "Code" character varying(10) NOT NULL,
        CONSTRAINT "PK_Languages" PRIMARY KEY ("Id")
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250810173939_InitialCreate') THEN
    CREATE TABLE "Logs" (
        "Id" integer GENERATED BY DEFAULT AS IDENTITY,
        "MessageTemplate" text,
        "Level" text,
        "TimeStamp" timestamp without time zone NOT NULL,
        "Exception" text,
        CONSTRAINT "PK_Logs" PRIMARY KEY ("Id")
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250810173939_InitialCreate') THEN
    CREATE TABLE "MobileLogins" (
        "Id" integer GENERATED BY DEFAULT AS IDENTITY,
        "Provider" integer NOT NULL,
        "ExternalUserId" character varying(20) NOT NULL,
        "Code" integer NOT NULL,
        "SendDate" timestamp without time zone NOT NULL,
        "IsSend" boolean NOT NULL,
        "IsUsed" boolean NOT NULL,
        CONSTRAINT "PK_MobileLogins" PRIMARY KEY ("Id")
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250810173939_InitialCreate') THEN
    CREATE TABLE "OperationClaims" (
        "Id" integer GENERATED BY DEFAULT AS IDENTITY,
        "Name" character varying(50) NOT NULL,
        "Alias" character varying(50),
        "Description" character varying(100),
        CONSTRAINT "PK_OperationClaims" PRIMARY KEY ("Id")
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250810173939_InitialCreate') THEN
    CREATE TABLE "PlantAnalyses" (
        "Id" integer GENERATED BY DEFAULT AS IDENTITY,
        "ImagePath" character varying(500),
        "ImageBase64" text,
        "PlantType" character varying(100),
        "GrowthStage" character varying(100),
        "ElementDeficiencies" text,
        "Diseases" text,
        "Pests" text,
        "AnalysisResult" text,
        "AnalysisDate" timestamp without time zone NOT NULL,
        "UserId" integer,
        "AnalysisStatus" character varying(50),
        "N8nWebhookResponse" text,
        "Status" boolean NOT NULL DEFAULT TRUE,
        "CreatedDate" timestamp without time zone NOT NULL,
        "UpdatedDate" timestamp without time zone,
        CONSTRAINT "PK_PlantAnalyses" PRIMARY KEY ("Id")
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250810173939_InitialCreate') THEN
    CREATE TABLE "Translates" (
        "Id" integer GENERATED BY DEFAULT AS IDENTITY,
        "LangId" integer NOT NULL,
        "Code" character varying(50) NOT NULL,
        "Value" character varying(500) NOT NULL,
        CONSTRAINT "PK_Translates" PRIMARY KEY ("Id")
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250810173939_InitialCreate') THEN
    CREATE TABLE "UserClaims" (
        "UserId" integer NOT NULL,
        "ClaimId" integer NOT NULL,
        CONSTRAINT "PK_UserClaims" PRIMARY KEY ("UserId", "ClaimId")
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250810173939_InitialCreate') THEN
    CREATE TABLE "UserGroups" (
        "GroupId" integer NOT NULL,
        "UserId" integer NOT NULL,
        CONSTRAINT "PK_UserGroups" PRIMARY KEY ("UserId", "GroupId")
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250810173939_InitialCreate') THEN
    CREATE TABLE "Users" (
        "UserId" integer GENERATED BY DEFAULT AS IDENTITY,
        "CitizenId" bigint NOT NULL,
        "FullName" character varying(100) NOT NULL,
        "Email" character varying(50),
        "RefreshToken" text,
        "MobilePhones" character varying(30),
        "Status" boolean NOT NULL,
        "BirthDate" timestamp without time zone NOT NULL,
        "Gender" integer NOT NULL,
        "RecordDate" timestamp without time zone NOT NULL,
        "Address" character varying(200),
        "Notes" character varying(500),
        "UpdateContactDate" timestamp without time zone NOT NULL,
        "PasswordSalt" bytea,
        "PasswordHash" bytea,
        CONSTRAINT "PK_Users" PRIMARY KEY ("UserId")
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250810173939_InitialCreate') THEN
    INSERT INTO "Languages" ("Id", "Code", "Name")
    VALUES (1, 'tr-TR', 'Türkçe');
    INSERT INTO "Languages" ("Id", "Code", "Name")
    VALUES (2, 'en-US', 'English');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250810173939_InitialCreate') THEN
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (1, 'Login', 1, 'Giriş');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (2, 'Email', 1, 'E posta');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (3, 'Password', 1, 'Parola');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (4, 'Update', 1, 'Güncelle');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (5, 'Delete', 1, 'Sil');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (6, 'UsersGroups', 1, 'Kullanıcının Grupları');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (7, 'UsersClaims', 1, 'Kullanıcının Yetkileri');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (8, 'Create', 1, 'Yeni');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (9, 'Users', 1, 'Kullanıcılar');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (10, 'Groups', 1, 'Gruplar');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (11, 'Login', 2, 'Login');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (12, 'Email', 2, 'Email');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (13, 'Password', 2, 'Password');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (14, 'Update', 2, 'Update');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (15, 'Delete', 2, 'Delete');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (16, 'UsersGroups', 2, 'User''s Groups');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (17, 'UsersClaims', 2, 'User''s Claims');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (18, 'Create', 2, 'Create');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (19, 'Users', 2, 'Users');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (20, 'Groups', 2, 'Groups');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (21, 'OperationClaim', 1, 'Operasyon Yetkileri');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (22, 'OperationClaim', 2, 'Operation Claim');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (23, 'Languages', 1, 'Diller');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (24, 'Languages', 2, 'Languages');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (25, 'TranslateWords', 1, 'Dil Çevirileri');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (26, 'TranslateWords', 2, 'Translate Words');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (27, 'Management', 1, 'Yönetim');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (28, 'Management', 2, 'Management');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (29, 'AppMenu', 1, 'Uygulama');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (30, 'AppMenu', 2, 'Application');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (31, 'Added', 1, 'Başarıyla Eklendi.');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (32, 'Added', 2, 'Successfully Added.');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (33, 'Updated', 1, 'Başarıyla Güncellendi.');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (34, 'Updated', 2, 'Successfully Updated.');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (35, 'Deleted', 1, 'Başarıyla Silindi.');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (36, 'Deleted', 2, 'Successfully Deleted.');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (37, 'OperationClaimExists', 1, 'Bu operasyon izni zaten mevcut.');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (38, 'OperationClaimExists', 2, 'This operation permit already exists.');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (39, 'StringLengthMustBeGreaterThanThree', 1, 'Lütfen En Az 3 Karakterden Oluşan Bir İfade Girin.');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (40, 'StringLengthMustBeGreaterThanThree', 2, 'Please Enter A Phrase Of At Least 3 Characters.');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (41, 'CouldNotBeVerifyCid', 1, 'Kimlik No Doğrulanamadı.');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (42, 'CouldNotBeVerifyCid', 2, 'Could not be verify Citizen Id');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (43, 'VerifyCid', 1, 'Kimlik No Doğrulandı.');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (44, 'VerifyCid', 2, 'Verify Citizen Id');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (45, 'AuthorizationsDenied', 1, 'Yetkiniz olmayan bir alana girmeye çalıştığınız tespit edildi.');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (46, 'AuthorizationsDenied', 2, 'It has been detected that you are trying to enter an area that you do not have authorization.');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (47, 'UserNotFound', 1, 'Kimlik Bilgileri Doğrulanamadı. Lütfen Yeni Kayıt Ekranını kullanın.');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (48, 'UserNotFound', 2, 'Credentials Could Not Verify. Please use the New Registration Screen.');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (49, 'PasswordError', 1, 'Kimlik Bilgileri Doğrulanamadı, Kullanıcı adı ve/veya parola hatalı.');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (50, 'PasswordError', 2, 'Credentials Failed to Authenticate, Username and / or password incorrect.');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (51, 'SuccessfulLogin', 1, 'Sisteme giriş başarılı.');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (52, 'SuccessfulLogin', 2, 'Login to the system is successful.');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (53, 'SendMobileCode', 1, 'Lütfen Size SMS Olarak Gönderilen Kodu Girin!');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (54, 'SendMobileCode', 2, 'Please Enter The Code Sent To You By SMS!');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (55, 'NameAlreadyExist', 1, 'Oluşturmaya Çalıştığınız Nesne Zaten Var.');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (56, 'NameAlreadyExist', 2, 'The Object You Are Trying To Create Already Exists.');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (57, 'WrongCID', 1, 'Vatandaşlık No Sistemimizde Bulunamadı. Lütfen Yeni Kayıt Oluşturun!');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (58, 'WrongCID', 2, 'Citizenship Number Not Found In Our System. Please Create New Registration!');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (59, 'CID', 1, 'Vatandaşlık No');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (60, 'CID', 2, 'Citizenship Number');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (61, 'PasswordEmpty', 1, 'Parola boş olamaz!');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (62, 'PasswordEmpty', 2, 'Password can not be empty!');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (63, 'PasswordLength', 1, 'Minimum 8 Karakter Uzunluğunda Olmalıdır!');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (64, 'PasswordLength', 2, 'Must be at least 8 characters long! ');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (65, 'PasswordUppercaseLetter', 1, 'En Az 1 Büyük Harf İçermelidir!');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (66, 'PasswordUppercaseLetter', 2, 'Must Contain At Least 1 Capital Letter!');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (67, 'PasswordLowercaseLetter', 1, 'En Az 1 Küçük Harf İçermelidir!');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (68, 'PasswordLowercaseLetter', 2, 'Must Contain At Least 1 Lowercase Letter!');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (69, 'PasswordDigit', 1, 'En Az 1 Rakam İçermelidir!');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (70, 'PasswordDigit', 2, 'It Must Contain At Least 1 Digit!');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (71, 'PasswordSpecialCharacter', 1, 'En Az 1 Simge İçermelidir!');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (72, 'PasswordSpecialCharacter', 2, 'Must Contain At Least 1 Symbol!');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (73, 'SendPassword', 1, 'Yeni Parolanız E-Posta Adresinize Gönderildi.');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (74, 'SendPassword', 2, 'Your new password has been sent to your e-mail address.');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (75, 'InvalidCode', 1, 'Geçersiz Bir Kod Girdiniz!');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (76, 'InvalidCode', 2, 'You Entered An Invalid Code!');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (77, 'SmsServiceNotFound', 1, 'SMS Servisine Ulaşılamıyor.');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (78, 'SmsServiceNotFound', 2, 'Unable to Reach SMS Service.');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (79, 'TrueButCellPhone', 1, 'Bilgiler doğru. Cep telefonu gerekiyor.');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (80, 'TrueButCellPhone', 2, 'The information is correct. Cell phone is required.');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (81, 'TokenProviderException', 1, 'Token Provider boş olamaz!');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (82, 'TokenProviderException', 2, 'Token Provider cannot be empty!');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (83, 'Unknown', 1, 'Bilinmiyor!');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (84, 'Unknown', 2, 'Unknown!');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (85, 'NewPassword', 1, 'Yeni Parola:');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (86, 'NewPassword', 2, 'New Password:');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (87, 'ChangePassword', 1, 'Parola Değiştir');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (88, 'ChangePassword', 2, 'Change Password');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (89, 'Save', 1, 'Kaydet');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (90, 'Save', 2, 'Save');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (91, 'GroupName', 1, 'Grup Adı');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (92, 'GroupName', 2, 'Group Name');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (93, 'FullName', 1, 'Tam Adı');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (94, 'FullName', 2, 'Full Name');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (95, 'Address', 1, 'Adres');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (96, 'Address', 2, 'Address');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (97, 'Notes', 1, 'Notlar');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (98, 'Notes', 2, 'Notes');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (99, 'ConfirmPassword', 1, 'Parolayı Doğrula');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (100, 'ConfirmPassword', 2, 'Confirm Password');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (101, 'Code', 1, 'Kod');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (102, 'Code', 2, 'Code');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (103, 'Alias', 1, 'Görünen Ad');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (104, 'Alias', 2, 'Alias');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (105, 'Description', 1, 'Açıklama');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (106, 'Description', 2, 'Description');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (107, 'Value', 1, 'Değer');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (108, 'Value', 2, 'Value');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (109, 'LangCode', 1, 'Dil Kodu');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (110, 'LangCode', 2, 'Lang Code');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (111, 'Name', 1, 'Adı');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (112, 'Name', 2, 'Name');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (113, 'MobilePhones', 1, 'Cep Telefonu');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (114, 'MobilePhones', 2, 'Mobile Phone');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (115, 'NoRecordsFound', 1, 'Kayıt Bulunamadı');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (116, 'NoRecordsFound', 2, 'No Records Found');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (117, 'Required', 1, 'Bu alan zorunludur!');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (118, 'Required', 2, 'This field is required!');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (119, 'Permissions', 1, 'Permissions');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (120, 'Permissions', 2, 'İzinler');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (121, 'GroupList', 1, 'Grup Listesi');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (122, 'GroupList', 2, 'Group List');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (123, 'GrupPermissions', 1, 'Grup Yetkileri');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (124, 'GrupPermissions', 2, 'Grup Permissions');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (125, 'Add', 1, 'Ekle');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (126, 'Add', 2, 'Add');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (127, 'UserList', 1, 'Kullanıcı Listesi');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (128, 'UserList', 2, 'User List');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (129, 'OperationClaimList', 1, 'Yetki Listesi');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (130, 'OperationClaimList', 2, 'OperationClaim List');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (131, 'LanguageList', 1, 'Dil Listesi');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (132, 'LanguageList', 2, 'Language List');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (133, 'TranslateList', 1, 'Dil Çeviri Listesi');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (134, 'TranslateList', 2, 'Translate List');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (135, 'LogList', 1, 'İşlem Kütüğü');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (136, 'LogList', 2, 'LogList');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (137, 'DeleteConfirm', 1, 'Emin misiniz?');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (138, 'DeleteConfirm', 2, 'Are you sure?');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250810173939_InitialCreate') THEN
    CREATE INDEX "IX_MobileLogins_ExternalUserId_Provider" ON "MobileLogins" ("ExternalUserId", "Provider");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250810173939_InitialCreate') THEN
    CREATE INDEX "IX_PlantAnalyses_AnalysisDate" ON "PlantAnalyses" ("AnalysisDate");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250810173939_InitialCreate') THEN
    CREATE INDEX "IX_PlantAnalyses_UserId" ON "PlantAnalyses" ("UserId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250810173939_InitialCreate') THEN
    CREATE INDEX "IX_Users_CitizenId" ON "Users" ("CitizenId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250810173939_InitialCreate') THEN
    CREATE INDEX "IX_Users_MobilePhones" ON "Users" ("MobilePhones");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250810173939_InitialCreate') THEN
    PERFORM setval(
        pg_get_serial_sequence('"Languages"', 'Id'),
        GREATEST(
            (SELECT MAX("Id") FROM "Languages") + 1,
            nextval(pg_get_serial_sequence('"Languages"', 'Id'))),
        false);
    PERFORM setval(
        pg_get_serial_sequence('"Translates"', 'Id'),
        GREATEST(
            (SELECT MAX("Id") FROM "Translates") + 1,
            nextval(pg_get_serial_sequence('"Translates"', 'Id'))),
        false);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250810173939_InitialCreate') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20250810173939_InitialCreate', '9.0.0');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250810195522_AddDetailedAnalysisColumn') THEN
    ALTER TABLE "PlantAnalyses" ADD "DetailedAnalysisData" text;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250810195522_AddDetailedAnalysisColumn') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20250810195522_AddDetailedAnalysisColumn', '9.0.0');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "AdditionalInfo" text;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "AiModel" character varying(100);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "Altitude" integer;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "AnalysisId" character varying(200);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "ConfidenceLevel" numeric(5,2);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "ContactEmail" character varying(100);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "ContactPhone" character varying(50);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "CropType" character varying(100);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "CrossFactorInsights" text;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "DiseaseSymptoms" text;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "EstimatedYieldImpact" character varying(100);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "ExpectedHarvestDate" timestamp without time zone;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "FarmerId" character varying(100);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "FieldId" character varying(100);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "HealthSeverity" character varying(50);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "Humidity" numeric(5,2);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "IdentificationConfidence" numeric(5,2);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "ImageSizeKb" numeric(10,2);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "LastFertilization" timestamp without time zone;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "LastIrrigation" timestamp without time zone;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "Latitude" numeric(18,6);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "Location" character varying(200);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "Longitude" numeric(18,6);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "Notes" character varying(1000);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "NutrientStatus" text;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "OverallHealthScore" integer;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "PlantSpecies" character varying(200);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "PlantVariety" character varying(100);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "PlantingDate" timestamp without time zone;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "PreviousTreatments" text;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "PrimaryConcern" character varying(500);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "PrimaryDeficiency" character varying(100);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "Prognosis" character varying(100);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "Recommendations" text;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "SoilType" character varying(100);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "SponsorId" character varying(100);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "StressIndicators" text;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "Temperature" numeric(5,2);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "TotalCostTry" numeric(10,4);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "TotalCostUsd" numeric(10,6);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "TotalTokens" numeric(10,2);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "UrgencyLevel" character varying(50);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "VigorScore" integer;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    ALTER TABLE "PlantAnalyses" ADD "WeatherConditions" character varying(100);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    CREATE INDEX "IX_PlantAnalyses_AnalysisId" ON "PlantAnalyses" ("AnalysisId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    CREATE INDEX "IX_PlantAnalyses_CropType" ON "PlantAnalyses" ("CropType");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    CREATE INDEX "IX_PlantAnalyses_FarmerId" ON "PlantAnalyses" ("FarmerId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    CREATE INDEX "IX_PlantAnalyses_SponsorId" ON "PlantAnalyses" ("SponsorId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811203430_AddN8nResponseFields') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20250811203430_AddN8nResponseFields', '9.0.0');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811204515_FixDateTimeTimeZones') THEN
    ALTER TABLE "PlantAnalyses" ALTER COLUMN "UpdatedDate" TYPE timestamptz;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811204515_FixDateTimeTimeZones') THEN
    ALTER TABLE "PlantAnalyses" ALTER COLUMN "PlantingDate" TYPE timestamptz;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811204515_FixDateTimeTimeZones') THEN
    ALTER TABLE "PlantAnalyses" ALTER COLUMN "LastIrrigation" TYPE timestamptz;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811204515_FixDateTimeTimeZones') THEN
    ALTER TABLE "PlantAnalyses" ALTER COLUMN "LastFertilization" TYPE timestamptz;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811204515_FixDateTimeTimeZones') THEN
    ALTER TABLE "PlantAnalyses" ALTER COLUMN "ExpectedHarvestDate" TYPE timestamptz;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811204515_FixDateTimeTimeZones') THEN
    ALTER TABLE "PlantAnalyses" ALTER COLUMN "CreatedDate" TYPE timestamptz;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811204515_FixDateTimeTimeZones') THEN
    ALTER TABLE "PlantAnalyses" ALTER COLUMN "AnalysisDate" TYPE timestamptz;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811204515_FixDateTimeTimeZones') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20250811204515_FixDateTimeTimeZones', '9.0.0');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811205605_RemoveImageBase64Column') THEN
    ALTER TABLE "PlantAnalyses" DROP COLUMN "ImageBase64";
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811205605_RemoveImageBase64Column') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20250811205605_RemoveImageBase64Column', '9.0.0');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811212114_AddConfigurationTable') THEN
    CREATE TABLE "Configurations" (
        "Id" integer GENERATED BY DEFAULT AS IDENTITY,
        "Key" character varying(100) NOT NULL,
        "Value" character varying(500) NOT NULL,
        "Description" character varying(1000),
        "Category" character varying(50) NOT NULL,
        "ValueType" character varying(20) NOT NULL,
        "IsActive" boolean NOT NULL DEFAULT TRUE,
        "CreatedDate" timestamptz NOT NULL DEFAULT (NOW()),
        "UpdatedDate" timestamptz,
        "CreatedBy" integer,
        "UpdatedBy" integer,
        CONSTRAINT "PK_Configurations" PRIMARY KEY ("Id")
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811212114_AddConfigurationTable') THEN
    CREATE INDEX "IX_Configurations_Category" ON "Configurations" ("Category");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811212114_AddConfigurationTable') THEN
    CREATE UNIQUE INDEX "IX_Configurations_Key" ON "Configurations" ("Key");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811212114_AddConfigurationTable') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20250811212114_AddConfigurationTable', '9.0.0');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811212141_SeedConfigurationData') THEN
    INSERT INTO "Configurations" ("Id", "Key", "Value", "Description", "Category", "ValueType", "IsActive", "CreatedDate")
    VALUES (1, 'IMAGE_MAX_SIZE_MB', '50', 'Maximum image file size in MB', 'ImageProcessing', 'int', TRUE, TIMESTAMPTZ '2025-01-11T21:21:00Z');
    INSERT INTO "Configurations" ("Id", "Key", "Value", "Description", "Category", "ValueType", "IsActive", "CreatedDate")
    VALUES (2, 'IMAGE_MIN_SIZE_BYTES', '100', 'Minimum image file size in bytes', 'ImageProcessing', 'int', TRUE, TIMESTAMPTZ '2025-01-11T21:21:00Z');
    INSERT INTO "Configurations" ("Id", "Key", "Value", "Description", "Category", "ValueType", "IsActive", "CreatedDate")
    VALUES (3, 'IMAGE_MAX_WIDTH', '1920', 'Maximum image width in pixels', 'ImageProcessing', 'int', TRUE, TIMESTAMPTZ '2025-01-11T21:21:00Z');
    INSERT INTO "Configurations" ("Id", "Key", "Value", "Description", "Category", "ValueType", "IsActive", "CreatedDate")
    VALUES (4, 'IMAGE_MAX_HEIGHT', '1080', 'Maximum image height in pixels', 'ImageProcessing', 'int', TRUE, TIMESTAMPTZ '2025-01-11T21:21:00Z');
    INSERT INTO "Configurations" ("Id", "Key", "Value", "Description", "Category", "ValueType", "IsActive", "CreatedDate")
    VALUES (5, 'IMAGE_MIN_WIDTH', '100', 'Minimum image width in pixels', 'ImageProcessing', 'int', TRUE, TIMESTAMPTZ '2025-01-11T21:21:00Z');
    INSERT INTO "Configurations" ("Id", "Key", "Value", "Description", "Category", "ValueType", "IsActive", "CreatedDate")
    VALUES (6, 'IMAGE_MIN_HEIGHT', '100', 'Minimum image height in pixels', 'ImageProcessing', 'int', TRUE, TIMESTAMPTZ '2025-01-11T21:21:00Z');
    INSERT INTO "Configurations" ("Id", "Key", "Value", "Description", "Category", "ValueType", "IsActive", "CreatedDate")
    VALUES (7, 'IMAGE_ENABLE_AUTO_RESIZE', 'true', 'Enable automatic image resizing if dimensions exceed limits', 'ImageProcessing', 'bool', TRUE, TIMESTAMPTZ '2025-01-11T21:21:00Z');
    INSERT INTO "Configurations" ("Id", "Key", "Value", "Description", "Category", "ValueType", "IsActive", "CreatedDate")
    VALUES (8, 'IMAGE_RESIZE_QUALITY', '85', 'JPEG quality for resized images (1-100)', 'ImageProcessing', 'int', TRUE, TIMESTAMPTZ '2025-01-11T21:21:00Z');
    INSERT INTO "Configurations" ("Id", "Key", "Value", "Description", "Category", "ValueType", "IsActive", "CreatedDate")
    VALUES (9, 'IMAGE_SUPPORTED_FORMATS', 'JPEG,PNG,GIF,WebP,BMP,SVG,TIFF', 'Comma-separated list of supported image formats', 'ImageProcessing', 'string', TRUE, TIMESTAMPTZ '2025-01-11T21:21:00Z');
    INSERT INTO "Configurations" ("Id", "Key", "Value", "Description", "Category", "ValueType", "IsActive", "CreatedDate")
    VALUES (10, 'IMAGE_STORAGE_PATH', 'wwwroot/uploads/images', 'Path where uploaded images are stored', 'ImageProcessing', 'string', TRUE, TIMESTAMPTZ '2025-01-11T21:21:00Z');
    INSERT INTO "Configurations" ("Id", "Key", "Value", "Description", "Category", "ValueType", "IsActive", "CreatedDate")
    VALUES (11, 'N8N_WEBHOOK_URL', 'https://your-n8n-instance.com/webhook/plant-analysis', 'N8N webhook endpoint for plant analysis', 'Application', 'string', TRUE, TIMESTAMPTZ '2025-01-11T21:21:00Z');
    INSERT INTO "Configurations" ("Id", "Key", "Value", "Description", "Category", "ValueType", "IsActive", "CreatedDate")
    VALUES (12, 'N8N_TIMEOUT_SECONDS', '300', 'Timeout for N8N webhook requests in seconds', 'Application', 'int', TRUE, TIMESTAMPTZ '2025-01-11T21:21:00Z');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811212141_SeedConfigurationData') THEN
    PERFORM setval(
        pg_get_serial_sequence('"Configurations"', 'Id'),
        GREATEST(
            (SELECT MAX("Id") FROM "Configurations") + 1,
            nextval(pg_get_serial_sequence('"Configurations"', 'Id'))),
        false);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811212141_SeedConfigurationData') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20250811212141_SeedConfigurationData', '9.0.0');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811213033_UpdateImageMaxSizeToDecimal') THEN

                    UPDATE "Configurations" 
                    SET "Value" = '50.0', 
                        "ValueType" = 'decimal', 
                        "Description" = 'Maximum image file size in MB (supports decimal values like 0.5)',
                        "UpdatedDate" = NOW()
                    WHERE "Key" = 'IMAGE_MAX_SIZE_MB'
                
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250811213033_UpdateImageMaxSizeToDecimal') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20250811213033_UpdateImageMaxSizeToDecimal', '9.0.0');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813053837_AddSubscriptionSystem') THEN
    CREATE TABLE "SubscriptionTiers" (
        "Id" integer GENERATED BY DEFAULT AS IDENTITY,
        "TierName" character varying(10) NOT NULL,
        "DisplayName" character varying(50) NOT NULL,
        "Description" character varying(500),
        "DailyRequestLimit" integer NOT NULL,
        "MonthlyRequestLimit" integer NOT NULL,
        "MonthlyPrice" numeric(18,2) NOT NULL,
        "YearlyPrice" numeric(18,2) NOT NULL,
        "Currency" character varying(3) NOT NULL DEFAULT 'TRY',
        "PrioritySupport" boolean NOT NULL,
        "AdvancedAnalytics" boolean NOT NULL,
        "ApiAccess" boolean NOT NULL,
        "ResponseTimeHours" integer NOT NULL,
        "AdditionalFeatures" character varying(2000),
        "IsActive" boolean NOT NULL,
        "DisplayOrder" integer NOT NULL,
        "CreatedDate" timestamp without time zone NOT NULL,
        "UpdatedDate" timestamp without time zone,
        "CreatedUserId" integer,
        "UpdatedUserId" integer,
        CONSTRAINT "PK_SubscriptionTiers" PRIMARY KEY ("Id")
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813053837_AddSubscriptionSystem') THEN
    CREATE TABLE "SubscriptionUsageLogs" (
        "Id" integer GENERATED BY DEFAULT AS IDENTITY,
        "UserId" integer NOT NULL,
        "UserSubscriptionId" integer NOT NULL,
        "PlantAnalysisId" integer,
        "UsageType" character varying(50) NOT NULL,
        "UsageDate" timestamp without time zone NOT NULL,
        "RequestEndpoint" character varying(200),
        "RequestMethod" character varying(10),
        "IsSuccessful" boolean NOT NULL,
        "ResponseStatus" character varying(50),
        "ErrorMessage" character varying(1000),
        "DailyQuotaUsed" integer NOT NULL,
        "DailyQuotaLimit" integer NOT NULL,
        "MonthlyQuotaUsed" integer NOT NULL,
        "MonthlyQuotaLimit" integer NOT NULL,
        "IpAddress" character varying(45),
        "UserAgent" character varying(500),
        "RequestData" character varying(4000),
        "ResponseTimeMs" integer,
        "CreatedDate" timestamp without time zone NOT NULL,
        CONSTRAINT "PK_SubscriptionUsageLogs" PRIMARY KEY ("Id")
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813053837_AddSubscriptionSystem') THEN
    CREATE TABLE "UserSubscriptions" (
        "Id" integer GENERATED BY DEFAULT AS IDENTITY,
        "UserId" integer NOT NULL,
        "SubscriptionTierId" integer NOT NULL,
        "StartDate" timestamp without time zone NOT NULL,
        "EndDate" timestamp without time zone NOT NULL,
        "IsActive" boolean NOT NULL,
        "AutoRenew" boolean NOT NULL,
        "PaymentMethod" character varying(50),
        "PaymentReference" character varying(200),
        "PaidAmount" numeric(18,2) NOT NULL,
        "Currency" character varying(3) DEFAULT 'TRY',
        "LastPaymentDate" timestamp without time zone,
        "NextPaymentDate" timestamp without time zone,
        "CurrentDailyUsage" integer NOT NULL,
        "CurrentMonthlyUsage" integer NOT NULL,
        "LastUsageResetDate" timestamp without time zone,
        "MonthlyUsageResetDate" timestamp without time zone,
        "Status" character varying(50) NOT NULL DEFAULT 'Active',
        "CancellationReason" character varying(500),
        "CancellationDate" timestamp without time zone,
        "IsTrialSubscription" boolean NOT NULL,
        "TrialEndDate" timestamp without time zone,
        "CreatedDate" timestamp without time zone NOT NULL,
        "UpdatedDate" timestamp without time zone,
        "CreatedUserId" integer,
        "UpdatedUserId" integer,
        CONSTRAINT "PK_UserSubscriptions" PRIMARY KEY ("Id"),
        CONSTRAINT "FK_UserSubscriptions_SubscriptionTiers_SubscriptionTierId" FOREIGN KEY ("SubscriptionTierId") REFERENCES "SubscriptionTiers" ("Id") ON DELETE RESTRICT
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813053837_AddSubscriptionSystem') THEN
    INSERT INTO "SubscriptionTiers" ("Id", "AdditionalFeatures", "AdvancedAnalytics", "ApiAccess", "CreatedDate", "CreatedUserId", "Currency", "DailyRequestLimit", "Description", "DisplayName", "DisplayOrder", "IsActive", "MonthlyPrice", "MonthlyRequestLimit", "PrioritySupport", "ResponseTimeHours", "TierName", "UpdatedDate", "UpdatedUserId", "YearlyPrice")
    VALUES (1, '["Basic plant analysis","Email notifications","Basic reports"]', FALSE, FALSE, TIMESTAMP '2025-08-13T05:38:36.609798', NULL, 'TRY', 5, 'Perfect for small farms and hobbyists', 'Small', 1, TRUE, 99.99, 50, FALSE, 48, 'S', NULL, NULL, 999.99);
    INSERT INTO "SubscriptionTiers" ("Id", "AdditionalFeatures", "AdvancedAnalytics", "ApiAccess", "CreatedDate", "CreatedUserId", "Currency", "DailyRequestLimit", "Description", "DisplayName", "DisplayOrder", "IsActive", "MonthlyPrice", "MonthlyRequestLimit", "PrioritySupport", "ResponseTimeHours", "TierName", "UpdatedDate", "UpdatedUserId", "YearlyPrice")
    VALUES (2, '["Advanced plant analysis","Email & SMS notifications","Detailed reports","Historical data access","Basic API access"]', TRUE, FALSE, TIMESTAMP '2025-08-13T05:38:36.609834', NULL, 'TRY', 20, 'Ideal for medium-sized farms', 'Medium', 2, TRUE, 299.99, 200, FALSE, 24, 'M', NULL, NULL, 2999.99);
    INSERT INTO "SubscriptionTiers" ("Id", "AdditionalFeatures", "AdvancedAnalytics", "ApiAccess", "CreatedDate", "CreatedUserId", "Currency", "DailyRequestLimit", "Description", "DisplayName", "DisplayOrder", "IsActive", "MonthlyPrice", "MonthlyRequestLimit", "PrioritySupport", "ResponseTimeHours", "TierName", "UpdatedDate", "UpdatedUserId", "YearlyPrice")
    VALUES (3, '["Premium plant analysis with AI insights","All notification channels","Custom reports","Full historical data","Full API access","Priority support","Export capabilities"]', TRUE, TRUE, TIMESTAMP '2025-08-13T05:38:36.609838', NULL, 'TRY', 50, 'Best for large commercial farms', 'Large', 3, TRUE, 599.99, 500, TRUE, 12, 'L', NULL, NULL, 5999.99);
    INSERT INTO "SubscriptionTiers" ("Id", "AdditionalFeatures", "AdvancedAnalytics", "ApiAccess", "CreatedDate", "CreatedUserId", "Currency", "DailyRequestLimit", "Description", "DisplayName", "DisplayOrder", "IsActive", "MonthlyPrice", "MonthlyRequestLimit", "PrioritySupport", "ResponseTimeHours", "TierName", "UpdatedDate", "UpdatedUserId", "YearlyPrice")
    VALUES (4, '["Enterprise AI analysis with custom models","All features included","Dedicated support team","Custom integrations","White-label options","SLA guarantee","Training sessions","Unlimited data retention"]', TRUE, TRUE, TIMESTAMP '2025-08-13T05:38:36.609842', NULL, 'TRY', 200, 'Enterprise solution for agricultural corporations', 'Extra Large', 4, TRUE, 1499.99, 2000, TRUE, 6, 'XL', NULL, NULL, 14999.99);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813053837_AddSubscriptionSystem') THEN
    CREATE INDEX "IX_SubscriptionTiers_IsActive" ON "SubscriptionTiers" ("IsActive");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813053837_AddSubscriptionSystem') THEN
    CREATE UNIQUE INDEX "IX_SubscriptionTiers_TierName" ON "SubscriptionTiers" ("TierName");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813053837_AddSubscriptionSystem') THEN
    CREATE INDEX "IX_SubscriptionUsageLogs_IsSuccessful" ON "SubscriptionUsageLogs" ("IsSuccessful");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813053837_AddSubscriptionSystem') THEN
    CREATE INDEX "IX_SubscriptionUsageLogs_PlantAnalysisId" ON "SubscriptionUsageLogs" ("PlantAnalysisId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813053837_AddSubscriptionSystem') THEN
    CREATE INDEX "IX_SubscriptionUsageLogs_UsageDate" ON "SubscriptionUsageLogs" ("UsageDate");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813053837_AddSubscriptionSystem') THEN
    CREATE INDEX "IX_SubscriptionUsageLogs_UserId" ON "SubscriptionUsageLogs" ("UserId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813053837_AddSubscriptionSystem') THEN
    CREATE INDEX "IX_SubscriptionUsageLogs_UserId_UsageDate" ON "SubscriptionUsageLogs" ("UserId", "UsageDate");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813053837_AddSubscriptionSystem') THEN
    CREATE INDEX "IX_SubscriptionUsageLogs_UserSubscriptionId" ON "SubscriptionUsageLogs" ("UserSubscriptionId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813053837_AddSubscriptionSystem') THEN
    CREATE INDEX "IX_SubscriptionUsageLogs_UserSubscriptionId_UsageDate" ON "SubscriptionUsageLogs" ("UserSubscriptionId", "UsageDate");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813053837_AddSubscriptionSystem') THEN
    CREATE INDEX "IX_UserSubscriptions_EndDate" ON "UserSubscriptions" ("EndDate");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813053837_AddSubscriptionSystem') THEN
    CREATE INDEX "IX_UserSubscriptions_IsActive" ON "UserSubscriptions" ("IsActive");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813053837_AddSubscriptionSystem') THEN
    CREATE INDEX "IX_UserSubscriptions_Status" ON "UserSubscriptions" ("Status");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813053837_AddSubscriptionSystem') THEN
    CREATE INDEX "IX_UserSubscriptions_SubscriptionTierId" ON "UserSubscriptions" ("SubscriptionTierId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813053837_AddSubscriptionSystem') THEN
    CREATE INDEX "IX_UserSubscriptions_UserId" ON "UserSubscriptions" ("UserId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813053837_AddSubscriptionSystem') THEN
    CREATE INDEX "IX_UserSubscriptions_UserId_IsActive" ON "UserSubscriptions" ("UserId", "IsActive");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813053837_AddSubscriptionSystem') THEN
    PERFORM setval(
        pg_get_serial_sequence('"SubscriptionTiers"', 'Id'),
        GREATEST(
            (SELECT MAX("Id") FROM "SubscriptionTiers") + 1,
            nextval(pg_get_serial_sequence('"SubscriptionTiers"', 'Id'))),
        false);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813053837_AddSubscriptionSystem') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20250813053837_AddSubscriptionSystem', '9.0.0');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813061611_UpdateSubscriptionEntities') THEN
    UPDATE "SubscriptionTiers" SET "CreatedDate" = TIMESTAMP '2025-08-13T06:16:11.122525'
    WHERE "Id" = 1;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813061611_UpdateSubscriptionEntities') THEN
    UPDATE "SubscriptionTiers" SET "CreatedDate" = TIMESTAMP '2025-08-13T06:16:11.122562'
    WHERE "Id" = 2;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813061611_UpdateSubscriptionEntities') THEN
    UPDATE "SubscriptionTiers" SET "CreatedDate" = TIMESTAMP '2025-08-13T06:16:11.122566'
    WHERE "Id" = 3;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813061611_UpdateSubscriptionEntities') THEN
    UPDATE "SubscriptionTiers" SET "CreatedDate" = TIMESTAMP '2025-08-13T06:16:11.12257'
    WHERE "Id" = 4;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813061611_UpdateSubscriptionEntities') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20250813061611_UpdateSubscriptionEntities', '9.0.0');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813135944_AddSubscriptionSystemFinal') THEN
    UPDATE "SubscriptionTiers" SET "CreatedDate" = TIMESTAMP '2025-08-13T13:59:44.213405'
    WHERE "Id" = 1;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813135944_AddSubscriptionSystemFinal') THEN
    UPDATE "SubscriptionTiers" SET "CreatedDate" = TIMESTAMP '2025-08-13T13:59:44.213448'
    WHERE "Id" = 2;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813135944_AddSubscriptionSystemFinal') THEN
    UPDATE "SubscriptionTiers" SET "CreatedDate" = TIMESTAMP '2025-08-13T13:59:44.213452'
    WHERE "Id" = 3;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813135944_AddSubscriptionSystemFinal') THEN
    UPDATE "SubscriptionTiers" SET "CreatedDate" = TIMESTAMP '2025-08-13T13:59:44.213456'
    WHERE "Id" = 4;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813135944_AddSubscriptionSystemFinal') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20250813135944_AddSubscriptionSystemFinal', '9.0.0');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813161221_AddTrialSubscriptionTier') THEN
    UPDATE "SubscriptionTiers" SET "CreatedDate" = TIMESTAMP '2025-08-13T16:12:20.714001'
    WHERE "Id" = 1;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813161221_AddTrialSubscriptionTier') THEN
    UPDATE "SubscriptionTiers" SET "CreatedDate" = TIMESTAMP '2025-08-13T16:12:20.714069'
    WHERE "Id" = 2;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813161221_AddTrialSubscriptionTier') THEN
    UPDATE "SubscriptionTiers" SET "CreatedDate" = TIMESTAMP '2025-08-13T16:12:20.714074'
    WHERE "Id" = 3;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813161221_AddTrialSubscriptionTier') THEN
    UPDATE "SubscriptionTiers" SET "CreatedDate" = TIMESTAMP '2025-08-13T16:12:20.714078'
    WHERE "Id" = 4;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813161221_AddTrialSubscriptionTier') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20250813161221_AddTrialSubscriptionTier', '9.0.0');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813161327_UpdateSubscriptionTiersWithTrial') THEN
    UPDATE "SubscriptionTiers" SET "AdditionalFeatures" = '["Basic plant analysis","Email notifications","Trial access"]', "CreatedDate" = TIMESTAMP '2025-08-13T16:13:27.022217', "DailyRequestLimit" = 1, "Description" = '30-day trial with limited access', "DisplayName" = 'Trial', "DisplayOrder" = 0, "MonthlyPrice" = 0.0, "MonthlyRequestLimit" = 30, "ResponseTimeHours" = 72, "TierName" = 'Trial', "YearlyPrice" = 0.0
    WHERE "Id" = 1;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813161327_UpdateSubscriptionTiersWithTrial') THEN
    UPDATE "SubscriptionTiers" SET "AdditionalFeatures" = '["Basic plant analysis","Email notifications","Basic reports"]', "AdvancedAnalytics" = FALSE, "CreatedDate" = TIMESTAMP '2025-08-13T16:13:27.022257', "DailyRequestLimit" = 5, "Description" = 'Perfect for small farms and hobbyists', "DisplayName" = 'Small', "DisplayOrder" = 1, "MonthlyPrice" = 99.99, "MonthlyRequestLimit" = 50, "ResponseTimeHours" = 48, "TierName" = 'S', "YearlyPrice" = 999.99
    WHERE "Id" = 2;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813161327_UpdateSubscriptionTiersWithTrial') THEN
    UPDATE "SubscriptionTiers" SET "AdditionalFeatures" = '["Advanced plant analysis","Email & SMS notifications","Detailed reports","Historical data access","Basic API access"]', "ApiAccess" = FALSE, "CreatedDate" = TIMESTAMP '2025-08-13T16:13:27.022262', "DailyRequestLimit" = 20, "Description" = 'Ideal for medium-sized farms', "DisplayName" = 'Medium', "MonthlyPrice" = 299.99, "MonthlyRequestLimit" = 200, "PrioritySupport" = FALSE, "ResponseTimeHours" = 24, "TierName" = 'M', "YearlyPrice" = 2999.99
    WHERE "Id" = 3;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813161327_UpdateSubscriptionTiersWithTrial') THEN
    UPDATE "SubscriptionTiers" SET "AdditionalFeatures" = '["Premium plant analysis with AI insights","All notification channels","Custom reports","Full historical data","Full API access","Priority support","Export capabilities"]', "CreatedDate" = TIMESTAMP '2025-08-13T16:13:27.022265', "DailyRequestLimit" = 50, "Description" = 'Best for large commercial farms', "DisplayName" = 'Large', "MonthlyPrice" = 599.99, "MonthlyRequestLimit" = 500, "ResponseTimeHours" = 12, "TierName" = 'L', "YearlyPrice" = 5999.99
    WHERE "Id" = 4;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813161327_UpdateSubscriptionTiersWithTrial') THEN
    INSERT INTO "SubscriptionTiers" ("Id", "AdditionalFeatures", "AdvancedAnalytics", "ApiAccess", "CreatedDate", "CreatedUserId", "Currency", "DailyRequestLimit", "Description", "DisplayName", "DisplayOrder", "IsActive", "MonthlyPrice", "MonthlyRequestLimit", "PrioritySupport", "ResponseTimeHours", "TierName", "UpdatedDate", "UpdatedUserId", "YearlyPrice")
    VALUES (5, '["Enterprise AI analysis with custom models","All features included","Dedicated support team","Custom integrations","White-label options","SLA guarantee","Training sessions","Unlimited data retention"]', TRUE, TRUE, TIMESTAMP '2025-08-13T16:13:27.022269', NULL, 'TRY', 200, 'Enterprise solution for agricultural corporations', 'Extra Large', 5, TRUE, 1499.99, 2000, TRUE, 6, 'XL', NULL, NULL, 14999.99);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813161327_UpdateSubscriptionTiersWithTrial') THEN
    PERFORM setval(
        pg_get_serial_sequence('"SubscriptionTiers"', 'Id'),
        GREATEST(
            (SELECT MAX("Id") FROM "SubscriptionTiers") + 1,
            nextval(pg_get_serial_sequence('"SubscriptionTiers"', 'Id'))),
        false);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813161327_UpdateSubscriptionTiersWithTrial') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20250813161327_UpdateSubscriptionTiersWithTrial', '9.0.0');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813161354_FinalTrialTierUpdate') THEN
    UPDATE "SubscriptionTiers" SET "CreatedDate" = TIMESTAMP '2025-08-13T16:13:53.786922'
    WHERE "Id" = 1;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813161354_FinalTrialTierUpdate') THEN
    UPDATE "SubscriptionTiers" SET "CreatedDate" = TIMESTAMP '2025-08-13T16:13:53.786999'
    WHERE "Id" = 2;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813161354_FinalTrialTierUpdate') THEN
    UPDATE "SubscriptionTiers" SET "CreatedDate" = TIMESTAMP '2025-08-13T16:13:53.787003'
    WHERE "Id" = 3;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813161354_FinalTrialTierUpdate') THEN
    UPDATE "SubscriptionTiers" SET "CreatedDate" = TIMESTAMP '2025-08-13T16:13:53.787007'
    WHERE "Id" = 4;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813161354_FinalTrialTierUpdate') THEN
    UPDATE "SubscriptionTiers" SET "CreatedDate" = TIMESTAMP '2025-08-13T16:13:53.787011'
    WHERE "Id" = 5;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813161354_FinalTrialTierUpdate') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20250813161354_FinalTrialTierUpdate', '9.0.0');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813161429_FixedDateTrialTier') THEN
    UPDATE "SubscriptionTiers" SET "CreatedDate" = TIMESTAMP '2025-08-13T16:00:00'
    WHERE "Id" = 1;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813161429_FixedDateTrialTier') THEN
    UPDATE "SubscriptionTiers" SET "CreatedDate" = TIMESTAMP '2025-08-13T16:00:00'
    WHERE "Id" = 2;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813161429_FixedDateTrialTier') THEN
    UPDATE "SubscriptionTiers" SET "CreatedDate" = TIMESTAMP '2025-08-13T16:00:00'
    WHERE "Id" = 3;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813161429_FixedDateTrialTier') THEN
    UPDATE "SubscriptionTiers" SET "CreatedDate" = TIMESTAMP '2025-08-13T16:00:00'
    WHERE "Id" = 4;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813161429_FixedDateTrialTier') THEN
    UPDATE "SubscriptionTiers" SET "CreatedDate" = TIMESTAMP '2025-08-13T16:00:00'
    WHERE "Id" = 5;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813161429_FixedDateTrialTier') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20250813161429_FixedDateTrialTier', '9.0.0');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813212907_AddSponsorshipSystem') THEN
    ALTER TABLE "UserSubscriptions" ADD "IsSponsoredSubscription" boolean NOT NULL DEFAULT FALSE;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813212907_AddSponsorshipSystem') THEN
    ALTER TABLE "UserSubscriptions" ADD "SponsorId" integer;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813212907_AddSponsorshipSystem') THEN
    ALTER TABLE "UserSubscriptions" ADD "SponsorshipCodeId" integer;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813212907_AddSponsorshipSystem') THEN
    ALTER TABLE "UserSubscriptions" ADD "SponsorshipNotes" text;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813212907_AddSponsorshipSystem') THEN
    ALTER TABLE "PlantAnalyses" ADD "SponsorUserId" integer;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813212907_AddSponsorshipSystem') THEN
    ALTER TABLE "PlantAnalyses" ADD "SponsorshipCodeId" integer;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813212907_AddSponsorshipSystem') THEN
    CREATE TABLE "SponsorshipPurchases" (
        "Id" integer GENERATED BY DEFAULT AS IDENTITY,
        "SponsorId" integer NOT NULL,
        "SubscriptionTierId" integer NOT NULL,
        "Quantity" integer NOT NULL,
        "UnitPrice" numeric(18,2) NOT NULL,
        "TotalAmount" numeric(18,2) NOT NULL,
        "Currency" character varying(3) DEFAULT 'TRY',
        "PurchaseDate" timestamp without time zone NOT NULL,
        "PaymentMethod" character varying(50),
        "PaymentReference" character varying(200),
        "PaymentStatus" character varying(50) DEFAULT 'Pending',
        "PaymentCompletedDate" timestamp without time zone,
        "InvoiceNumber" character varying(100),
        "InvoiceAddress" character varying(500),
        "TaxNumber" character varying(50),
        "CompanyName" character varying(200),
        "CodesGenerated" integer NOT NULL,
        "CodesUsed" integer NOT NULL,
        "CodePrefix" character varying(10) DEFAULT 'AGRI',
        "ValidityDays" integer NOT NULL DEFAULT 365,
        "Status" character varying(50) DEFAULT 'Active',
        "Notes" character varying(1000),
        "PurchaseReason" character varying(500),
        "CreatedDate" timestamp without time zone NOT NULL DEFAULT (CURRENT_TIMESTAMP),
        "UpdatedDate" timestamp without time zone,
        "ApprovedByUserId" integer,
        "ApprovalDate" timestamp without time zone,
        CONSTRAINT "PK_SponsorshipPurchases" PRIMARY KEY ("Id"),
        CONSTRAINT "FK_SponsorshipPurchases_SubscriptionTiers_SubscriptionTierId" FOREIGN KEY ("SubscriptionTierId") REFERENCES "SubscriptionTiers" ("Id") ON DELETE RESTRICT,
        CONSTRAINT "FK_SponsorshipPurchases_Users_ApprovedByUserId" FOREIGN KEY ("ApprovedByUserId") REFERENCES "Users" ("UserId") ON DELETE RESTRICT,
        CONSTRAINT "FK_SponsorshipPurchases_Users_SponsorId" FOREIGN KEY ("SponsorId") REFERENCES "Users" ("UserId") ON DELETE RESTRICT
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813212907_AddSponsorshipSystem') THEN
    CREATE TABLE "SponsorshipCodes" (
        "Id" integer GENERATED BY DEFAULT AS IDENTITY,
        "Code" character varying(50) NOT NULL,
        "SponsorId" integer NOT NULL,
        "SubscriptionTierId" integer NOT NULL,
        "SponsorshipPurchaseId" integer NOT NULL,
        "IsUsed" boolean NOT NULL,
        "UsedByUserId" integer,
        "UsedDate" timestamp without time zone,
        "CreatedSubscriptionId" integer,
        "CreatedDate" timestamp without time zone NOT NULL DEFAULT (CURRENT_TIMESTAMP),
        "ExpiryDate" timestamp without time zone NOT NULL,
        "IsActive" boolean NOT NULL,
        "Notes" character varying(500),
        "DistributedTo" character varying(200),
        "DistributionChannel" character varying(50),
        "DistributionDate" timestamp without time zone,
        CONSTRAINT "PK_SponsorshipCodes" PRIMARY KEY ("Id"),
        CONSTRAINT "FK_SponsorshipCodes_SponsorshipPurchases_SponsorshipPurchaseId" FOREIGN KEY ("SponsorshipPurchaseId") REFERENCES "SponsorshipPurchases" ("Id") ON DELETE CASCADE,
        CONSTRAINT "FK_SponsorshipCodes_SubscriptionTiers_SubscriptionTierId" FOREIGN KEY ("SubscriptionTierId") REFERENCES "SubscriptionTiers" ("Id") ON DELETE RESTRICT,
        CONSTRAINT "FK_SponsorshipCodes_UserSubscriptions_CreatedSubscriptionId" FOREIGN KEY ("CreatedSubscriptionId") REFERENCES "UserSubscriptions" ("Id") ON DELETE RESTRICT,
        CONSTRAINT "FK_SponsorshipCodes_Users_SponsorId" FOREIGN KEY ("SponsorId") REFERENCES "Users" ("UserId") ON DELETE RESTRICT,
        CONSTRAINT "FK_SponsorshipCodes_Users_UsedByUserId" FOREIGN KEY ("UsedByUserId") REFERENCES "Users" ("UserId") ON DELETE RESTRICT
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813212907_AddSponsorshipSystem') THEN
    CREATE INDEX "IX_UserSubscriptions_SponsorId" ON "UserSubscriptions" ("SponsorId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813212907_AddSponsorshipSystem') THEN
    CREATE INDEX "IX_PlantAnalyses_SponsorshipCodeId" ON "PlantAnalyses" ("SponsorshipCodeId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813212907_AddSponsorshipSystem') THEN
    CREATE INDEX "IX_PlantAnalyses_SponsorUserId" ON "PlantAnalyses" ("SponsorUserId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813212907_AddSponsorshipSystem') THEN
    CREATE UNIQUE INDEX "IX_SponsorshipCodes_Code" ON "SponsorshipCodes" ("Code");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813212907_AddSponsorshipSystem') THEN
    CREATE UNIQUE INDEX "IX_SponsorshipCodes_CreatedSubscriptionId" ON "SponsorshipCodes" ("CreatedSubscriptionId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813212907_AddSponsorshipSystem') THEN
    CREATE INDEX "IX_SponsorshipCodes_IsUsed" ON "SponsorshipCodes" ("IsUsed");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813212907_AddSponsorshipSystem') THEN
    CREATE INDEX "IX_SponsorshipCodes_SponsorId" ON "SponsorshipCodes" ("SponsorId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813212907_AddSponsorshipSystem') THEN
    CREATE INDEX "IX_SponsorshipCodes_SponsorId_IsUsed" ON "SponsorshipCodes" ("SponsorId", "IsUsed");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813212907_AddSponsorshipSystem') THEN
    CREATE INDEX "IX_SponsorshipCodes_SponsorshipPurchaseId" ON "SponsorshipCodes" ("SponsorshipPurchaseId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813212907_AddSponsorshipSystem') THEN
    CREATE INDEX "IX_SponsorshipCodes_SubscriptionTierId" ON "SponsorshipCodes" ("SubscriptionTierId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813212907_AddSponsorshipSystem') THEN
    CREATE INDEX "IX_SponsorshipCodes_UsedByUserId" ON "SponsorshipCodes" ("UsedByUserId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813212907_AddSponsorshipSystem') THEN
    CREATE INDEX "IX_SponsorshipPurchases_ApprovedByUserId" ON "SponsorshipPurchases" ("ApprovedByUserId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813212907_AddSponsorshipSystem') THEN
    CREATE INDEX "IX_SponsorshipPurchases_InvoiceNumber" ON "SponsorshipPurchases" ("InvoiceNumber");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813212907_AddSponsorshipSystem') THEN
    CREATE INDEX "IX_SponsorshipPurchases_PaymentStatus" ON "SponsorshipPurchases" ("PaymentStatus");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813212907_AddSponsorshipSystem') THEN
    CREATE INDEX "IX_SponsorshipPurchases_SponsorId" ON "SponsorshipPurchases" ("SponsorId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813212907_AddSponsorshipSystem') THEN
    CREATE INDEX "IX_SponsorshipPurchases_SubscriptionTierId" ON "SponsorshipPurchases" ("SubscriptionTierId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813212907_AddSponsorshipSystem') THEN
    ALTER TABLE "PlantAnalyses" ADD CONSTRAINT "FK_PlantAnalyses_SponsorshipCodes_SponsorshipCodeId" FOREIGN KEY ("SponsorshipCodeId") REFERENCES "SponsorshipCodes" ("Id");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813212907_AddSponsorshipSystem') THEN
    ALTER TABLE "PlantAnalyses" ADD CONSTRAINT "FK_PlantAnalyses_Users_SponsorUserId" FOREIGN KEY ("SponsorUserId") REFERENCES "Users" ("UserId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813212907_AddSponsorshipSystem') THEN
    ALTER TABLE "UserSubscriptions" ADD CONSTRAINT "FK_UserSubscriptions_Users_SponsorId" FOREIGN KEY ("SponsorId") REFERENCES "Users" ("UserId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813212907_AddSponsorshipSystem') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20250813212907_AddSponsorshipSystem', '9.0.0');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813214715_AppliedSponsorshipSchemaManually') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20250813214715_AppliedSponsorshipSchemaManually', '9.0.0');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813221146_AddEmailAlreadyExistsMessage') THEN
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (139, 'EmailAlreadyExists', 1, 'Bu e-posta adresi ile zaten bir hesap mevcut.');
    INSERT INTO "Translates" ("Id", "Code", "LangId", "Value")
    VALUES (140, 'EmailAlreadyExists', 2, 'An account with this email address already exists.');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813221146_AddEmailAlreadyExistsMessage') THEN
    PERFORM setval(
        pg_get_serial_sequence('"Translates"', 'Id'),
        GREATEST(
            (SELECT MAX("Id") FROM "Translates") + 1,
            nextval(pg_get_serial_sequence('"Translates"', 'Id'))),
        false);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250813221146_AddEmailAlreadyExistsMessage') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20250813221146_AddEmailAlreadyExistsMessage', '9.0.0');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250814160711_AddSponsorshipLinkFields') THEN
    ALTER TABLE "SponsorshipCodes" ADD "LastClickIpAddress" text;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250814160711_AddSponsorshipLinkFields') THEN
    ALTER TABLE "SponsorshipCodes" ADD "LinkClickCount" integer NOT NULL DEFAULT 0;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250814160711_AddSponsorshipLinkFields') THEN
    ALTER TABLE "SponsorshipCodes" ADD "LinkClickDate" timestamp without time zone;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250814160711_AddSponsorshipLinkFields') THEN
    ALTER TABLE "SponsorshipCodes" ADD "LinkDelivered" boolean NOT NULL DEFAULT FALSE;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250814160711_AddSponsorshipLinkFields') THEN
    ALTER TABLE "SponsorshipCodes" ADD "LinkSentDate" timestamp without time zone;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250814160711_AddSponsorshipLinkFields') THEN
    ALTER TABLE "SponsorshipCodes" ADD "LinkSentVia" text;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250814160711_AddSponsorshipLinkFields') THEN
    ALTER TABLE "SponsorshipCodes" ADD "RecipientName" text;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250814160711_AddSponsorshipLinkFields') THEN
    ALTER TABLE "SponsorshipCodes" ADD "RecipientPhone" text;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250814160711_AddSponsorshipLinkFields') THEN
    ALTER TABLE "SponsorshipCodes" ADD "RedemptionLink" text;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250814160711_AddSponsorshipLinkFields') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20250814160711_AddSponsorshipLinkFields', '9.0.0');
    END IF;
END $EF$;
COMMIT;

