#r "nuget: Npgsql, 8.0.4"

using Npgsql;
using System;

// Connection string for the staging database
var connectionString = "Host=localhost;Port=5432;Database=ziraai_dev;Username=ziraai;Password=devpass";

try
{
    using var connection = new NpgsqlConnection(connectionString);
    await connection.OpenAsync();
    
    Console.WriteLine("‚úÖ Connected to database successfully");

    // Add sponsorship columns to UserSubscriptions table
    var sponsorshipColumnsUserSubscriptions = new[]
    {
        @"ALTER TABLE ""UserSubscriptions"" ADD COLUMN IF NOT EXISTS ""IsSponsoredSubscription"" boolean NOT NULL DEFAULT false;",
        @"ALTER TABLE ""UserSubscriptions"" ADD COLUMN IF NOT EXISTS ""SponsorId"" integer;",
        @"ALTER TABLE ""UserSubscriptions"" ADD COLUMN IF NOT EXISTS ""SponsorshipCodeId"" integer;",
        @"ALTER TABLE ""UserSubscriptions"" ADD COLUMN IF NOT EXISTS ""SponsorshipNotes"" text;"
    };

    foreach (var sql in sponsorshipColumnsUserSubscriptions)
    {
        using var command = new NpgsqlCommand(sql, connection);
        await command.ExecuteNonQueryAsync();
        Console.WriteLine($"‚úÖ Executed: {sql.Substring(0, Math.Min(50, sql.Length))}...");
    }

    // Add sponsorship columns to PlantAnalyses table
    var sponsorshipColumnsPlantAnalyses = new[]
    {
        @"ALTER TABLE ""PlantAnalyses"" ADD COLUMN IF NOT EXISTS ""SponsorUserId"" integer;",
        @"ALTER TABLE ""PlantAnalyses"" ADD COLUMN IF NOT EXISTS ""SponsorshipCodeId"" integer;"
    };

    foreach (var sql in sponsorshipColumnsPlantAnalyses)
    {
        using var command = new NpgsqlCommand(sql, connection);
        await command.ExecuteNonQueryAsync();
        Console.WriteLine($"‚úÖ Executed: {sql.Substring(0, Math.Min(50, sql.Length))}...");
    }

    // Create SponsorshipPurchases table if it doesn't exist
    var createSponsorshipPurchasesTable = @"
        CREATE TABLE IF NOT EXISTS ""SponsorshipPurchases"" (
            ""Id"" integer GENERATED BY DEFAULT AS IDENTITY,
            ""SponsorId"" integer NOT NULL,
            ""SubscriptionTierId"" integer NOT NULL,
            ""Quantity"" integer NOT NULL,
            ""UnitPrice"" numeric(18,2) NOT NULL,
            ""TotalAmount"" numeric(18,2) NOT NULL,
            ""Currency"" character varying(3) DEFAULT 'TRY',
            ""PurchaseDate"" timestamp without time zone NOT NULL,
            ""PaymentMethod"" character varying(50),
            ""PaymentReference"" character varying(200),
            ""PaymentStatus"" character varying(50) DEFAULT 'Pending',
            ""PaymentCompletedDate"" timestamp without time zone,
            ""InvoiceNumber"" character varying(100),
            ""InvoiceAddress"" character varying(500),
            ""TaxNumber"" character varying(50),
            ""CompanyName"" character varying(200),
            ""CodesGenerated"" integer NOT NULL,
            ""CodesUsed"" integer NOT NULL,
            ""CodePrefix"" character varying(10) DEFAULT 'AGRI',
            ""ValidityDays"" integer NOT NULL DEFAULT 365,
            ""Status"" character varying(50) DEFAULT 'Active',
            ""Notes"" character varying(1000),
            ""PurchaseReason"" character varying(500),
            ""CreatedDate"" timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
            ""UpdatedDate"" timestamp without time zone,
            ""ApprovedByUserId"" integer,
            ""ApprovalDate"" timestamp without time zone,
            CONSTRAINT ""PK_SponsorshipPurchases"" PRIMARY KEY (""Id"")
        );";

    using (var command = new NpgsqlCommand(createSponsorshipPurchasesTable, connection))
    {
        await command.ExecuteNonQueryAsync();
        Console.WriteLine("‚úÖ SponsorshipPurchases table created or already exists");
    }

    // Create SponsorshipCodes table if it doesn't exist
    var createSponsorshipCodesTable = @"
        CREATE TABLE IF NOT EXISTS ""SponsorshipCodes"" (
            ""Id"" integer GENERATED BY DEFAULT AS IDENTITY,
            ""Code"" character varying(50) NOT NULL,
            ""SponsorId"" integer NOT NULL,
            ""SubscriptionTierId"" integer NOT NULL,
            ""SponsorshipPurchaseId"" integer NOT NULL,
            ""IsUsed"" boolean NOT NULL DEFAULT false,
            ""UsedByUserId"" integer,
            ""UsedDate"" timestamp without time zone,
            ""CreatedSubscriptionId"" integer,
            ""CreatedDate"" timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
            ""ExpiryDate"" timestamp without time zone NOT NULL,
            ""IsActive"" boolean NOT NULL DEFAULT true,
            ""Notes"" character varying(500),
            ""DistributedTo"" character varying(200),
            ""DistributionChannel"" character varying(50),
            ""DistributionDate"" timestamp without time zone,
            CONSTRAINT ""PK_SponsorshipCodes"" PRIMARY KEY (""Id"")
        );";

    using (var command = new NpgsqlCommand(createSponsorshipCodesTable, connection))
    {
        await command.ExecuteNonQueryAsync();
        Console.WriteLine("‚úÖ SponsorshipCodes table created or already exists");
    }

    // Create unique constraint on Code if it doesn't exist
    var createUniqueConstraint = @"
        DO $$
        BEGIN
            IF NOT EXISTS (
                SELECT 1 FROM pg_class c 
                JOIN pg_namespace n ON n.oid = c.relnamespace 
                WHERE c.relname = 'IX_SponsorshipCodes_Code' AND n.nspname = 'public'
            ) THEN
                CREATE UNIQUE INDEX ""IX_SponsorshipCodes_Code"" ON ""SponsorshipCodes"" (""Code"");
            END IF;
        END $$;";

    using (var command = new NpgsqlCommand(createUniqueConstraint, connection))
    {
        await command.ExecuteNonQueryAsync();
        Console.WriteLine("‚úÖ Unique constraint on SponsorshipCodes.Code created or already exists");
    }

    // Verify the UserSubscriptions table now has the sponsorship columns
    var verifyColumns = @"
        SELECT column_name, data_type, is_nullable 
        FROM information_schema.columns 
        WHERE table_name = 'UserSubscriptions' 
        AND column_name IN ('IsSponsoredSubscription', 'SponsorId', 'SponsorshipCodeId', 'SponsorshipNotes')
        ORDER BY column_name;";

    using (var command = new NpgsqlCommand(verifyColumns, connection))
    using (var reader = await command.ExecuteReaderAsync())
    {
        Console.WriteLine("\nüîç Sponsorship columns in UserSubscriptions table:");
        while (await reader.ReadAsync())
        {
            var columnName = reader.GetString(0);
            var dataType = reader.GetString(1);
            var isNullable = reader.GetString(2);
            Console.WriteLine($"  - {columnName}: {dataType} (nullable: {isNullable})");
        }
    }

    Console.WriteLine("\nüéâ All sponsorship database schema updates completed successfully!");
}
catch (Exception ex)
{
    Console.WriteLine($"‚ùå Error: {ex.Message}");
    if (ex.InnerException != null)
    {
        Console.WriteLine($"   Inner exception: {ex.InnerException.Message}");
    }
}