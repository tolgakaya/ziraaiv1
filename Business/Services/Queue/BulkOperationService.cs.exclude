using Business.Services.Messaging;
using Business.Services.MobileIntegration;
using Business.Services.Queue;
using Business.Services.Security;
using Core.Utilities.Results;
using DataAccess.Abstract;
using Entities.Concrete;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;

namespace Business.Services.Queue
{
    /// <summary>
    /// Advanced bulk operation service with queue processing, progress tracking, and comprehensive error handling
    /// Supports bulk link sending, code generation with retry mechanisms and real-time status monitoring
    /// </summary>
    public class BulkOperationService : IBulkOperationService
    {
        private readonly ISmsService _smsService;
        private readonly IWhatsAppService _whatsAppService;
        private readonly IDeepLinkService _deepLinkService;
        private readonly ISponsorshipCodeRepository _codeRepository;
        private readonly ISponsorshipPurchaseRepository _purchaseRepository;
        private readonly ISecurityService _securityService;
        private readonly IConfiguration _configuration;
        private readonly ILogger<BulkOperationService> _logger;

        // In-memory queue management (in production, use Redis or RabbitMQ)
        private readonly Dictionary<string, BulkOperationStatus> _operationStatusCache = new();
        private readonly Dictionary<string, BulkProcessingMetrics> _operationMetrics = new();
        private readonly Dictionary<string, List<BulkItemResult>> _operationResults = new();
        private readonly object _queueLock = new object();

        public BulkOperationService(
            ISmsService smsService,
            IWhatsAppService whatsAppService,
            IDeepLinkService deepLinkService,
            ISponsorshipCodeRepository codeRepository,
            ISponsorshipPurchaseRepository purchaseRepository,
            ISecurityService securityService,
            IConfiguration configuration,
            ILogger<BulkOperationService> logger)
        {
            _smsService = smsService;
            _whatsAppService = whatsAppService;
            _deepLinkService = deepLinkService;
            _codeRepository = codeRepository;
            _purchaseRepository = purchaseRepository;
            _securityService = securityService;
            _configuration = configuration;
            _logger = logger;
        }

        public async Task<IDataResult<BulkOperationResponse>> ProcessBulkLinkSendAsync(BulkLinkSendRequest request)
        {
            var operationId = Guid.NewGuid().ToString("N")[..12];
            var startTime = DateTime.Now;

            try
            {
                _logger.LogInformation("Starting bulk link send operation {OperationId} for sponsor {SponsorId} with {RecipientCount} recipients",
                    operationId, request.SponsorId, request.Recipients.Count);

                // Initial validation
                var validationResult = await ValidateBulkLinkSendRequest(request);
                if (!validationResult.Success)
                {
                    return new ErrorDataResult<BulkOperationResponse>(validationResult.Message);
                }

                // Security and rate limiting check
                var securityCheck = await _securityService.ValidateRateLimitAsync(
                    $"sponsor_{request.SponsorId}", "bulk_link_send", 5, 60);
                if (!securityCheck.Success)
                {
                    return new ErrorDataResult<BulkOperationResponse>($"Güvenlik kontrolü başarısız: {securityCheck.Message}");
                }

                // Initialize operation tracking
                var response = InitializeBulkOperation(operationId, "BulkLinkSend", request.Recipients.Count, startTime);

                // Start async processing
                _ = Task.Run(async () => await ProcessBulkLinkSendInternalAsync(operationId, request));

                return new SuccessDataResult<BulkOperationResponse>(response, "Bulk link gönderim işlemi kuyruğa alındı");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error starting bulk link send operation for sponsor {SponsorId}", request.SponsorId);
                return new ErrorDataResult<BulkOperationResponse>($"Bulk işlem başlatılamadı: {ex.Message}");
            }
        }

        public async Task<IDataResult<BulkOperationResponse>> ProcessBulkCodeGenerationAsync(BulkCodeGenerationRequest request)
        {
            var operationId = Guid.NewGuid().ToString("N")[..12];
            var startTime = DateTime.Now;

            try
            {
                _logger.LogInformation("Starting bulk code generation operation {OperationId} for sponsor {SponsorId} with {Quantity} codes",
                    operationId, request.SponsorId, request.Quantity);

                // Validation
                var validationResult = await ValidateBulkCodeGenerationRequest(request);
                if (!validationResult.Success)
                {
                    return new ErrorDataResult<BulkOperationResponse>(validationResult.Message);
                }

                // Initialize operation tracking
                var response = InitializeBulkOperation(operationId, "BulkCodeGeneration", request.Quantity, startTime);

                // Start async processing
                _ = Task.Run(async () => await ProcessBulkCodeGenerationInternalAsync(operationId, request));

                return new SuccessDataResult<BulkOperationResponse>(response, "Bulk kod oluşturma işlemi kuyruğa alındı");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error starting bulk code generation for sponsor {SponsorId}", request.SponsorId);
                return new ErrorDataResult<BulkOperationResponse>($"Bulk kod oluşturma başlatılamadı: {ex.Message}");
            }
        }

        public async Task<IDataResult<BulkOperationStatus>> GetBulkOperationStatusAsync(string operationId)
        {
            try
            {
                lock (_queueLock)
                {
                    if (!_operationStatusCache.ContainsKey(operationId))
                    {
                        return new ErrorDataResult<BulkOperationStatus>("İşlem bulunamadı");
                    }

                    var status = _operationStatusCache[operationId];
                    return new SuccessDataResult<BulkOperationStatus>(status);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting operation status for {OperationId}", operationId);
                return new ErrorDataResult<BulkOperationStatus>("İşlem durumu alınamadı");
            }
        }

        public async Task<IDataResult<List<BulkOperationSummary>>> GetBulkOperationHistoryAsync(int sponsorId, int pageSize = 50)
        {
            try
            {
                // In production, this would query from persistent storage
                var history = new List<BulkOperationSummary>();
                
                lock (_queueLock)
                {
                    // Mock historical data - in production, retrieve from database
                    foreach (var kvp in _operationStatusCache.Take(pageSize))
                    {
                        var metrics = _operationMetrics.ContainsKey(kvp.Key) ? _operationMetrics[kvp.Key] : new BulkProcessingMetrics();
                        
                        history.Add(new BulkOperationSummary
                        {
                            OperationId = kvp.Key,
                            OperationName = kvp.Value == BulkOperationStatus.Processing ? "Link Gönderimi" : "Kod Oluşturma",
                            OperationType = kvp.Value == BulkOperationStatus.Processing ? "BulkLinkSend" : "BulkCodeGeneration",
                            Status = kvp.Value,
                            TotalItems = metrics.TotalItems,
                            SuccessfulItems = metrics.SuccessfulItems,
                            FailedItems = metrics.FailedItems,
                            CreatedAt = DateTime.Now.AddMinutes(-new Random().Next(1, 1440)), // Mock timestamps
                            CompletedAt = kvp.Value == BulkOperationStatus.Completed ? DateTime.Now.AddMinutes(-new Random().Next(1, 60)) : null,
                            CreatedBy = $"Sponsor_{sponsorId}",
                            Summary = new Dictionary<string, object>
                            {
                                ["processing_time"] = metrics.AverageProcessingTime?.TotalMinutes ?? 0,
                                ["success_rate"] = metrics.SuccessRate,
                                ["channel_breakdown"] = new { SMS = 60, WhatsApp = 40 }
                            }
                        });
                    }
                }

                return new SuccessDataResult<List<BulkOperationSummary>>(history.OrderByDescending(h => h.CreatedAt).ToList());
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting bulk operation history for sponsor {SponsorId}", sponsorId);
                return new ErrorDataResult<List<BulkOperationSummary>>("İşlem geçmişi alınamadı");
            }
        }

        public async Task<IResult> CancelBulkOperationAsync(string operationId)
        {
            try
            {
                lock (_queueLock)
                {
                    if (!_operationStatusCache.ContainsKey(operationId))
                    {
                        return new ErrorResult("İşlem bulunamadı");
                    }

                    var currentStatus = _operationStatusCache[operationId];
                    if (currentStatus == BulkOperationStatus.Completed || currentStatus == BulkOperationStatus.Failed)
                    {
                        return new ErrorResult("Tamamlanmış veya başarısız işlemler iptal edilemez");
                    }

                    _operationStatusCache[operationId] = BulkOperationStatus.Cancelled;
                    
                    _logger.LogInformation("Bulk operation {OperationId} cancelled", operationId);
                    return new SuccessResult("İşlem iptal edildi");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error cancelling operation {OperationId}", operationId);
                return new ErrorResult("İşlem iptal edilemedi");
            }
        }

        public async Task<IResult> RetryFailedBulkItemsAsync(string operationId)
        {
            try
            {
                lock (_queueLock)
                {
                    if (!_operationResults.ContainsKey(operationId))
                    {
                        return new ErrorResult("İşlem bulunamadı");
                    }

                    var failedItems = _operationResults[operationId]
                        .Where(r => r.Status == BulkItemStatus.Failed)
                        .ToList();

                    if (!failedItems.Any())
                    {
                        return new SuccessResult("Yeniden denenmesi gereken başarısız öğe bulunamadı");
                    }

                    // Reset failed items to pending for retry
                    foreach (var item in failedItems)
                    {
                        item.Status = BulkItemStatus.Pending;
                        item.ErrorMessage = null;
                    }

                    // Update operation status if it was failed
                    if (_operationStatusCache[operationId] == BulkOperationStatus.Failed)
                    {
                        _operationStatusCache[operationId] = BulkOperationStatus.Processing;
                    }

                    _logger.LogInformation("Retrying {FailedItemCount} failed items for operation {OperationId}", 
                        failedItems.Count, operationId);

                    // Restart processing for failed items
                    _ = Task.Run(async () => await RetryFailedItemsInternalAsync(operationId, failedItems));

                    return new SuccessResult($"{failedItems.Count} başarısız öğe yeniden deneme kuyruğuna alındı");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrying failed items for operation {OperationId}", operationId);
                return new ErrorResult("Başarısız öğeler yeniden denenemedi");
            }
        }

        #region Private Methods

        private BulkOperationResponse InitializeBulkOperation(string operationId, string operationType, int totalItems, DateTime startTime)
        {
            var response = new BulkOperationResponse
            {
                OperationId = operationId,
                OperationType = operationType,
                Status = BulkOperationStatus.Queued,
                TotalItems = totalItems,
                CreatedAt = startTime,
                EstimatedCompletionTime = startTime.AddMinutes(totalItems * 0.5), // Rough estimate
                StatusUrl = $"/api/v1/bulk-operations/status/{operationId}",
                Metrics = new BulkProcessingMetrics
                {
                    TotalItems = totalItems,
                    ProcessedItems = 0,
                    SuccessfulItems = 0,
                    FailedItems = 0
                }
            };

            lock (_queueLock)
            {
                _operationStatusCache[operationId] = BulkOperationStatus.Queued;
                _operationMetrics[operationId] = response.Metrics;
                _operationResults[operationId] = new List<BulkItemResult>();
            }

            return response;
        }

        private async Task ProcessBulkLinkSendInternalAsync(string operationId, BulkLinkSendRequest request)
        {
            try
            {
                UpdateOperationStatus(operationId, BulkOperationStatus.Processing);
                
                var batchSize = request.Processing.BatchSize;
                var maxConcurrency = request.Processing.MaxConcurrency;
                var itemIndex = 0;

                // Process recipients in batches
                for (int batchStart = 0; batchStart < request.Recipients.Count; batchStart += batchSize)
                {
                    // Check for cancellation
                    if (IsOperationCancelled(operationId))
                    {
                        break;
                    }

                    var batch = request.Recipients
                        .Skip(batchStart)
                        .Take(batchSize)
                        .ToList();

                    // Process batch with concurrency control
                    var tasks = batch.Select(async recipient =>
                    {
                        var currentIndex = Interlocked.Increment(ref itemIndex) - 1;
                        return await ProcessSingleRecipient(operationId, request, recipient, currentIndex);
                    }).ToList();

                    // Execute with concurrency limit
                    var semaphore = new SemaphoreSlim(maxConcurrency);
                    var concurrentTasks = tasks.Select(async task =>
                    {
                        await semaphore.WaitAsync();
                        try
                        {
                            return await task;
                        }
                        finally
                        {
                            semaphore.Release();
                        }
                    });

                    await Task.WhenAll(concurrentTasks);

                    // Brief pause between batches to prevent overwhelming external services
                    await Task.Delay(TimeSpan.FromSeconds(request.Processing.RetryDelaySeconds / 10));
                }

                // Final status update
                FinalizeOperation(operationId);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error processing bulk link send operation {OperationId}", operationId);
                UpdateOperationStatus(operationId, BulkOperationStatus.Failed);
            }
        }

        private async Task<BulkItemResult> ProcessSingleRecipient(string operationId, BulkLinkSendRequest request, BulkLinkRecipient recipient, int index)
        {
            var startTime = DateTime.Now;
            var result = new BulkItemResult
            {
                Index = index,
                ItemId = recipient.SponsorshipCode ?? $"recipient_{index}",
                Status = BulkItemStatus.Processing,
                ProcessedAt = startTime
            };

            try
            {
                // Generate deep link for the recipient
                var deepLinkResult = await _deepLinkService.CreateSponsorshipLinkAsync(new DeepLinkRequest
                {
                    SponsorId = request.SponsorId,
                    SponsorshipCode = recipient.SponsorshipCode,
                    RecipientInfo = new RecipientInfo
                    {
                        Name = recipient.Name,
                        PhoneNumber = recipient.PhoneNumber,
                        Email = recipient.Email
                    },
                    CustomMessage = recipient.CustomMessage ?? request.MessageTemplate,
                    Platform = request.Channel.ToLower() == "whatsapp" ? "whatsapp" : "sms"
                });

                if (!deepLinkResult.Success)
                {
                    throw new Exception($"Deep link oluşturulamadı: {deepLinkResult.Message}");
                }

                // Send via appropriate channel
                var sendResult = await SendViaChannel(request.Channel, recipient, deepLinkResult.Data.ShortUrl, request.MessageTemplate);

                if (sendResult.Success)
                {
                    result.Status = BulkItemStatus.Success;
                    result.ResultData = JsonSerializer.Serialize(new
                    {
                        deepLink = deepLinkResult.Data.ShortUrl,
                        linkId = deepLinkResult.Data.LinkId,
                        channel = request.Channel,
                        sendTime = DateTime.Now
                    });

                    UpdateMetrics(operationId, true);
                }
                else
                {
                    throw new Exception(sendResult.Message);
                }
            }
            catch (Exception ex)
            {
                result.Status = BulkItemStatus.Failed;
                result.ErrorMessage = ex.Message;
                UpdateMetrics(operationId, false);

                _logger.LogWarning("Failed to process recipient {Index} in operation {OperationId}: {Error}",
                    index, operationId, ex.Message);
            }

            result.ProcessingDuration = DateTime.Now - startTime;
            
            lock (_queueLock)
            {
                _operationResults[operationId].Add(result);
            }

            return result;
        }

        private async Task<IResult> SendViaChannel(string channel, BulkLinkRecipient recipient, string deepLink, string messageTemplate)
        {
            var personalizedMessage = PersonalizeMessage(messageTemplate, recipient, deepLink);

            try
            {
                return channel.ToLower() switch
                {
                    "whatsapp" => await _whatsAppService.SendTemplateMessageAsync(new WhatsAppTemplateRequest
                    {
                        PhoneNumber = recipient.PhoneNumber,
                        TemplateName = "sponsorship_invite",
                        Components = new List<TemplateComponent>
                        {
                            new TemplateComponent
                            {
                                Type = "body",
                                Parameters = new List<ComponentParameter>
                                {
                                    new ComponentParameter { Type = "text", Text = recipient.Name ?? "Değerli Çiftçi" },
                                    new ComponentParameter { Type = "text", Text = deepLink }
                                }
                            }
                        }
                    }),

                    "sms" => await _smsService.SendSmsAsync(recipient.PhoneNumber, personalizedMessage),

                    _ => new ErrorResult($"Desteklenmeyen kanal: {channel}")
                };
            }
            catch (Exception ex)
            {
                return new ErrorResult($"Mesaj gönderilemedi: {ex.Message}");
            }
        }

        private string PersonalizeMessage(string template, BulkLinkRecipient recipient, string deepLink)
        {
            return template
                .Replace("{name}", recipient.Name ?? "Değerli Çiftçi")
                .Replace("{link}", deepLink)
                .Replace("{code}", recipient.SponsorshipCode ?? "")
                .Replace("{custom_message}", recipient.CustomMessage ?? "");
        }

        private async Task ProcessBulkCodeGenerationInternalAsync(string operationId, BulkCodeGenerationRequest request)
        {
            try
            {
                UpdateOperationStatus(operationId, BulkOperationStatus.Processing);

                // Process in batches
                var batchSize = request.Processing.BatchSize;
                var codesGenerated = 0;

                for (int batchStart = 0; batchStart < request.Quantity; batchStart += batchSize)
                {
                    if (IsOperationCancelled(operationId))
                    {
                        break;
                    }

                    var currentBatchSize = Math.Min(batchSize, request.Quantity - batchStart);
                    
                    // Generate codes for this batch
                    await GenerateCodeBatch(operationId, request, batchStart, currentBatchSize);
                    codesGenerated += currentBatchSize;

                    // Brief pause between batches
                    await Task.Delay(TimeSpan.FromSeconds(1));
                }

                FinalizeOperation(operationId);
                _logger.LogInformation("Completed bulk code generation operation {OperationId} with {CodesGenerated} codes", 
                    operationId, codesGenerated);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error processing bulk code generation {OperationId}", operationId);
                UpdateOperationStatus(operationId, BulkOperationStatus.Failed);
            }
        }

        private async Task GenerateCodeBatch(string operationId, BulkCodeGenerationRequest request, int batchStart, int batchSize)
        {
            for (int i = 0; i < batchSize; i++)
            {
                var index = batchStart + i;
                var result = new BulkItemResult
                {
                    Index = index,
                    ItemId = $"code_{index}",
                    Status = BulkItemStatus.Processing,
                    ProcessedAt = DateTime.Now
                };

                try
                {
                    // Generate unique code
                    var codePrefix = request.CodePrefix ?? "BULK";
                    var uniqueCode = $"{codePrefix}{DateTime.Now:yyyyMMdd}{index:D4}{new Random().Next(100, 999)}";

                    // Create sponsorship code entity
                    var sponsorshipCode = new SponsorshipCode
                    {
                        Code = uniqueCode,
                        SponsorId = request.SponsorId,
                        SubscriptionTierId = request.SubscriptionTierId,
                        IsActive = true,
                        IsUsed = false,
                        ExpiryDate = DateTime.Now.AddDays(request.ValidityDays),
                        CreatedDate = DateTime.Now,
                        // Additional properties would be set here
                    };

                    // Save to database (in production)
                    // await _codeRepository.AddAsync(sponsorshipCode);

                    result.Status = BulkItemStatus.Success;
                    result.ResultData = JsonSerializer.Serialize(new { code = uniqueCode, expiryDate = sponsorshipCode.ExpiryDate });
                    UpdateMetrics(operationId, true);
                }
                catch (Exception ex)
                {
                    result.Status = BulkItemStatus.Failed;
                    result.ErrorMessage = ex.Message;
                    UpdateMetrics(operationId, false);
                }

                result.ProcessingDuration = DateTime.Now - result.ProcessedAt;
                
                lock (_queueLock)
                {
                    _operationResults[operationId].Add(result);
                }
            }
        }

        private async Task RetryFailedItemsInternalAsync(string operationId, List<BulkItemResult> failedItems)
        {
            // Implementation for retrying failed items would go here
            // This would re-process the failed items with backoff strategy
            await Task.Delay(1000); // Placeholder
        }

        private async Task<IResult> ValidateBulkLinkSendRequest(BulkLinkSendRequest request)
        {
            if (request.Recipients == null || !request.Recipients.Any())
            {
                return new ErrorResult("En az bir alıcı belirtilmelidir");
            }

            if (request.Recipients.Count > 1000)
            {
                return new ErrorResult("Maksimum 1000 alıcıya aynı anda mesaj gönderilebilir");
            }

            if (string.IsNullOrWhiteSpace(request.MessageTemplate))
            {
                return new ErrorResult("Mesaj şablonu boş olamaz");
            }

            // Validate recipients
            foreach (var recipient in request.Recipients.Take(10)) // Sample validation
            {
                if (string.IsNullOrWhiteSpace(recipient.PhoneNumber) && string.IsNullOrWhiteSpace(recipient.Email))
                {
                    return new ErrorResult("Her alıcının telefon numarası veya e-posta adresi belirtilmelidir");
                }
            }

            return new SuccessResult();
        }

        private async Task<IResult> ValidateBulkCodeGenerationRequest(BulkCodeGenerationRequest request)
        {
            if (request.Quantity <= 0 || request.Quantity > 10000)
            {
                return new ErrorResult("Kod miktarı 1-10000 arasında olmalıdır");
            }

            if (request.SubscriptionTierId < 1 || request.SubscriptionTierId > 4)
            {
                return new ErrorResult("Geçersiz abonelik tier ID");
            }

            if (request.ValidityDays <= 0 || request.ValidityDays > 365)
            {
                return new ErrorResult("Geçerlilik süresi 1-365 gün arasında olmalıdır");
            }

            return new SuccessResult();
        }

        private void UpdateOperationStatus(string operationId, BulkOperationStatus status)
        {
            lock (_queueLock)
            {
                _operationStatusCache[operationId] = status;
            }
        }

        private void UpdateMetrics(string operationId, bool success)
        {
            lock (_queueLock)
            {
                if (_operationMetrics.ContainsKey(operationId))
                {
                    var metrics = _operationMetrics[operationId];
                    metrics.ProcessedItems++;
                    
                    if (success)
                    {
                        metrics.SuccessfulItems++;
                    }
                    else
                    {
                        metrics.FailedItems++;
                    }
                }
            }
        }

        private bool IsOperationCancelled(string operationId)
        {
            lock (_queueLock)
            {
                return _operationStatusCache.ContainsKey(operationId) && 
                       _operationStatusCache[operationId] == BulkOperationStatus.Cancelled;
            }
        }

        private void FinalizeOperation(string operationId)
        {
            lock (_queueLock)
            {
                if (_operationMetrics.ContainsKey(operationId))
                {
                    var metrics = _operationMetrics[operationId];
                    var finalStatus = metrics.FailedItems == 0 ? BulkOperationStatus.Completed :
                                     metrics.SuccessfulItems > 0 ? BulkOperationStatus.PartiallyCompleted :
                                     BulkOperationStatus.Failed;

                    _operationStatusCache[operationId] = finalStatus;
                }
            }
        }

        #endregion
    }
}